{
  "contractName": "PowerfulERC20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialBalance",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ERC20 Generator (https://vittominacori.github.io/erc20-generator)\",\"details\":\"Implementation of the PowerfulERC20\",\"events\":{\"MintFinished()\":{\"details\":\"Emitted during finish minting\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Approve spender to transfer tokens and then execute a callback on recipient.\",\"params\":{\"spender\":\"The address allowed to transfer to\",\"value\":\"The amount allowed to be transferred\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Approve spender to transfer tokens and then execute a callback on recipient.\",\"params\":{\"data\":\"Additional data with no specified format.\",\"spender\":\"The address allowed to transfer to.\",\"value\":\"The amount allowed to be transferred.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens\",\"value\":\"The amount of tokens to mint\"}},\"mintingFinished()\":{\"returns\":{\"_0\":\"if minting is finished or not.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,uint256)\":{\"details\":\"Remember that only owner can call so be careful when use on contracts generated from other contracts.\",\"params\":{\"tokenAddress\":\"The token contract address\",\"tokenAmount\":\"Number of tokens to be sent\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Transfer tokens to a specified address and then execute a callback on recipient.\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Transfer tokens to a specified address and then execute a callback on recipient.\",\"params\":{\"data\":\"Additional data with no specified format\",\"to\":\"The address to transfer to\",\"value\":\"The amount to be transferred\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another and then execute a callback on recipient.\",\"params\":{\"from\":\"The address which you want to send tokens from\",\"to\":\"The address which you want to transfer to\",\"value\":\"The amount of tokens to be transferred\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Transfer tokens from one address to another and then execute a callback on recipient.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which you want to send tokens from\",\"to\":\"The address which you want to transfer to\",\"value\":\"The amount of tokens to be transferred\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PowerfulERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/PowerfulERC20.sol\":\"PowerfulERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol\":{\"keccak256\":\"0xa19fd1188176a41cc851fe30e970b717c10d232ceefea0bd35cc124456364a1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed6c2e3c2f3dfa9aeaf5d3cbd350ae39231fa1bbe497f736ad85c5125d650ba6\",\"dweb:/ipfs/QmP2yDxh7zYf6nDm8zKwCsiwbti13zrXeB444Cni6wGt7V\"]},\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServiceReceiver.sol\":{\"keccak256\":\"0xd14e07a225f6354acdb4401da277c964a2a99c60145c5ddcecd9d53962e9659c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57b53570318170bb30da8175a45d00682aa24722fc5703478dc10dc4ede57a3b\",\"dweb:/ipfs/QmbkBAuWyp7wFbXEFRafbLj9VtwUn8sJs9nx2jqwBfzqLs\"]},\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/PowerfulERC20.sol\":{\"keccak256\":\"0x7d29fb01b25c54a21df98c12f8260b89fa0bbbe1c1592f7088417057322357f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4ee5a9318e8210cd90769874f20bfbe17ba4bb562b8c75659f6df09b481d517\",\"dweb:/ipfs/QmYWsc4sXb39ro48A8tsQpskxRwv79XriWcmuynePc5baz\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c\",\"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cd0b71a794900681c8bcc255599fac53c211fc6a530a58d7dd7246bfde6c4f5\",\"dweb:/ipfs/QmdAB1mFyuN2i25DRf9szWgp1FLCByqJ4F8aYzXWe3mfTR\"]},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xe959f6a1c2d844fd0f9f49709f1091de1303c7233431379a20963db18565ebf6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://316603e8a4a5b4a5bc4bbb87acfd016ae17b4b199164c0b7823b96515be330d6\",\"dweb:/ipfs/QmTXn5UAQo4k4dvtEiYN6tJ17uZ1osDUezyZ421PUA6kx6\"]},\"@openzeppelin/contracts/introspection/ERC165Checker.sol\":{\"keccak256\":\"0x6fd4018439998575e4702b0fe3cacbf77984f44f11aa26687214267d1865bd88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91c4ec52eb7649aafad19123ae3c7ba2838db20cb7081effca26ef89778d5f09\",\"dweb:/ipfs/QmWNH2ciUvYD8neCkhWUpaj6mG7oyoYtpDxde1a7Fhv3ha\"]},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f\",\"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d527ba022dc8eb272c76aa637913aa261e37847e5b465404328af1916fec55e2\",\"dweb:/ipfs/Qmei5afXj1pbucjpi7N3Epjb4o5AuzYXsSaUgYZmdPJHbu\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"keccak256\":\"0xe4180240b62082d70cffb0a0964699273195cd7c013f1d294dfe18d5e981dffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a74d9e8b7d904012eb345f5b483c6c521bd935e9801a403871a0469e699efae\",\"dweb:/ipfs/Qmeqm5iXdXTue6vJAaC7htFBxnENMTtWr3BM5JVZJT5RP1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"keccak256\":\"0x6d34fcf105a37da8aa0b7f4b38e99edd3db75c1e03565707439c77912f583cf6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://544bfa8988da4e4ec282f88712d57abaf0fc417a527f0b7f9fa9dd23d446d859\",\"dweb:/ipfs/QmVNeeXHDSChvx3eLmE3XyDzcZ7Z4JAe1s6XqPRZ6aUABR\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4bd4c9419d1182612ef415c60a83a9039b227fccb799937963448114c0473b58\",\"dweb:/ipfs/Qmat1U571v55F5JDDHHX7igGcmLF8Ehk9CzsWpjbdx3RTH\"]},\"erc-payable-token/contracts/token/ERC1363/ERC1363.sol\":{\"keccak256\":\"0xb1fbd98a62e4f53fa72243a200dd9f32512ba10a09becbbaf618163eb8d8b286\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9503481bff3b620969072ce46e0971101ae74bdcf02765521af9cd805c85df8\",\"dweb:/ipfs/QmbnWZwvNV5mAz4kEj52zoGMpu2XqmzTykW25p9Sj6Mdhv\"]},\"erc-payable-token/contracts/token/ERC1363/IERC1363.sol\":{\"keccak256\":\"0x2ffd4fc08a21a38fd0988d5293e0135f4b270b1a64d25227431f123bc3f70d01\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b0560feeece4984ec9ed178647a68c8b4754e8060666fa3d324d2f329913b799\",\"dweb:/ipfs/QmPGAU8CUZuuapQTBQ6g85EoJgPu6VaahBrCkY7uKgZMB6\"]},\"erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\":{\"keccak256\":\"0x478bb11a3b4c0bc453e19428643582b2f2afa7d2420e4818e23e6d598c2df356\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f0ba6b9bee2379e4019c1e3bfe173f8adfb3527f19aa4966eac97f21ec679c4\",\"dweb:/ipfs/QmXZ4ktrYyHeRjT59RufrCGy8YnPwr37k5GKvTyx9dVqfs\"]},\"erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\":{\"keccak256\":\"0xe6dd0bc06abcdd8a2fb131c5a44323d4b4fba46c156caba0d88e8a712c3a4192\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a872632ccd4821bd9c1714ef64f8f1c53e3b7667b75fe067c7b187f759e39d0\",\"dweb:/ipfs/QmRn84o9aHJGSV1bPCGnWESqMQpcuSXkVNjuLX2y7ZrXQw\"]},\"eth-token-recover/contracts/TokenRecover.sol\":{\"keccak256\":\"0x21cac11370b63473f1e656810829385167695277c945f599f75e2295a9269ec1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0d7ee54c6e06f5876ba8613a2d488db2a7b871b2bc8c82dd632e707a3754bd1\",\"dweb:/ipfs/Qmdvs2rHXkawFpmsByWteLWorpCy8pHP5esTZtycXPWaik\"]}},\"version\":1}",
  "bytecode": "0x608060408190526008805460ff60a01b191690556200233238819003908190833981810160405260c08110156200003557600080fd5b81019080805160405193929190846401000000008211156200005657600080fd5b9083019060208201858111156200006c57600080fd5b82516401000000008111828201881017156200008757600080fd5b82525081516020918201929091019080838360005b83811015620000b65781810151838201526020016200009c565b50505050905090810190601f168015620000e45780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010857600080fd5b9083019060208201858111156200011e57600080fd5b82516401000000008111828201881017156200013957600080fd5b82525081516020918201929091019080838360005b83811015620001685781810151838201526020016200014e565b50505050905090810190601f168015620001965780820380516001836020036101000a031916815260200191505b506040818152602083810151848301516060860151608090960151858501909452600d85526c0506f77657266756c455243323609c1b838601528951919750955091928392909189918991889184918491620001f99160039190850190620006d6565b5080516200020f906004906020840190620006d6565b50506005805460ff19166012179055508062000272576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b600655620002876301ffc9a760e01b62000402565b62000299634bbee2df60e01b62000402565b620002ab637dcf646760e11b62000402565b5060009050620002ba62000487565b600880546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350816001600160a01b0316632b66d72e34836040518363ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003675781810151838201526020016200034d565b50505050905090810190601f168015620003955780820380516001836020036101000a031916815260200191505b50925050506000604051808303818588803b158015620003b457600080fd5b505af1158015620003c9573d6000803e3d6000fd5b50505050505050620003e1846200048b60201b60201c565b620003f6620003ef62000487565b83620004a1565b50505050505062000772565b6001600160e01b0319808216141562000462576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600760205260409020805460ff19166001179055565b3390565b6005805460ff191660ff92909216919091179055565b6001600160a01b038216620004fd576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200050b60008383620005b0565b6200052781600254620005cd60201b620010b81790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200055a918390620010b8620005cd821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b620005c88383836200062f60201b620011121760201c565b505050565b60008282018381101562000628576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b62000647838383620005c860201b62000c0d1760201c565b6001600160a01b038316620005c8576006546200067c8262000668620006d0565b620005cd60201b620010b81790919060201c565b1115620005c8576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b60025490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200071957805160ff191683800117855562000749565b8280016001018555821562000749579182015b82811115620007495782518255916020019190600101906200072c565b50620007579291506200075b565b5090565b5b808211156200075757600081556001016200075c565b611bb080620007826000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063cae9ca5111610071578063cae9ca511461068d578063d8fbe99414610748578063dd62ed3e1461077e578063f2fde38b146107ac576101c4565b8063a457c2d71461056f578063a9059cbb1461059b578063c1d34b89146105c7576101c4565b80637d64bcb4116100d35780637d64bcb41461050f5780638980f11f146105175780638da5cb5b1461054357806395d89b4114610567576101c4565b806370a08231146104b5578063715018a6146104db57806379cc6790146104e3576101c4565b8063313ce56711610166578063395093511161014057806339509351146103835780634000aea0146103af57806340c10f191461046a57806342966c6814610498576101c4565b8063313ce567146103315780633177029f1461034f578063355274ea1461037b576101c4565b8063095ea7b3116101a2578063095ea7b3146102895780631296ee62146102b557806318160ddd146102e157806323b872dd146102fb576101c4565b806301ffc9a7146101c957806305d2035b1461020457806306fdde031461020c575b600080fd5b6101f0600480360360208110156101df57600080fd5b50356001600160e01b0319166107d2565b604080519115158252519081900360200190f35b6101f06107f1565b610214610801565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024e578181015183820152602001610236565b50505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f06004803603604081101561029f57600080fd5b506001600160a01b038135169060200135610897565b6101f0600480360360408110156102cb57600080fd5b506001600160a01b0381351690602001356108b4565b6102e96108d7565b60408051918252519081900360200190f35b6101f06004803603606081101561031157600080fd5b506001600160a01b038135811691602081013590911690604001356108dd565b610339610964565b6040805160ff9092168252519081900360200190f35b6101f06004803603604081101561036557600080fd5b506001600160a01b03813516906020013561096d565b6102e9610989565b6101f06004803603604081101561039957600080fd5b506001600160a01b03813516906020013561098f565b6101f0600480360360608110156103c557600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156103f557600080fd5b82018360208201111561040757600080fd5b8035906020019184600183028401116401000000008311171561042957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109dd945050505050565b6104966004803603604081101561048057600080fd5b506001600160a01b038135169060200135610a38565b005b610496600480360360208110156104ae57600080fd5b5035610ae7565b6102e9600480360360208110156104cb57600080fd5b50356001600160a01b0316610afb565b610496610b16565b610496600480360360408110156104f957600080fd5b506001600160a01b038135169060200135610bb8565b610496610c12565b6104966004803603604081101561052d57600080fd5b506001600160a01b038135169060200135610cf1565b61054b610dd7565b604080516001600160a01b039092168252519081900360200190f35b610214610de6565b6101f06004803603604081101561058557600080fd5b506001600160a01b038135169060200135610e47565b6101f0600480360360408110156105b157600080fd5b506001600160a01b038135169060200135610eaf565b6101f0600480360360808110156105dd57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561061857600080fd5b82018360208201111561062a57600080fd5b8035906020019184600183028401116401000000008311171561064c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ec3945050505050565b6101f0600480360360608110156106a357600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156106d357600080fd5b8201836020820111156106e557600080fd5b8035906020019184600183028401116401000000008311171561070757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f24945050505050565b6101f06004803603606081101561075e57600080fd5b506001600160a01b03813581169160208101359091169060400135610f77565b6102e96004803603604081101561079457600080fd5b506001600160a01b0381358116916020013516610f94565b610496600480360360208110156107c257600080fd5b50356001600160a01b0316610fbf565b6001600160e01b03191660009081526007602052604090205460ff1690565b600854600160a01b900460ff1690565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561088d5780601f106108625761010080835404028352916020019161088d565b820191906000526020600020905b81548152906001019060200180831161087057829003601f168201915b5050505050905090565b60006108ab6108a4611193565b8484611197565b50600192915050565b60006108d08383604051806020016040528060008152506109dd565b9392505050565b60025490565b60006108ea848484611283565b61095a846108f6611193565b61095585604051806060016040528060288152602001611a80602891396001600160a01b038a16600090815260016020526040812090610934611193565b6001600160a01b0316815260208101919091526040016000205491906113de565b611197565b5060019392505050565b60055460ff1690565b60006108d0838360405180602001604052806000815250610f24565b60065490565b60006108ab61099c611193565b8461095585600160006109ad611193565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906110b8565b60006109e98484610eaf565b506109fd6109f5611193565b858585611475565b61095a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a5a6026913960400191505060405180910390fd5b600854600160a01b900460ff1615610a815760405162461bcd60e51b8152600401808060200182810382526022815260200180611a386022913960400191505060405180910390fd5b610a89611193565b6008546001600160a01b03908116911614610ad9576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b610ae382826115ba565b5050565b610af8610af2611193565b826116aa565b50565b6001600160a01b031660009081526020819052604090205490565b610b1e611193565b6008546001600160a01b03908116911614610b6e576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6008546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600880546001600160a01b0319169055565b6000610bef82604051806060016040528060248152602001611ac860249139610be886610be3611193565b610f94565b91906113de565b9050610c0383610bfd611193565b83611197565b610c0d83836116aa565b505050565b600854600160a01b900460ff1615610c5b5760405162461bcd60e51b8152600401808060200182810382526022815260200180611a386022913960400191505060405180910390fd5b610c63611193565b6008546001600160a01b03908116911614610cb3576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6008805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b610cf9611193565b6008546001600160a01b03908116911614610d49576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b816001600160a01b031663a9059cbb610d60610dd7565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050506040513d6020811015610dd157600080fd5b50505050565b6008546001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561088d5780601f106108625761010080835404028352916020019161088d565b60006108ab610e54611193565b8461095585604051806060016040528060258152602001611b566025913960016000610e7e611193565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906113de565b60006108ab610ebc611193565b8484611283565b6000610ed08585856108dd565b50610edd85858585611475565b610f185760405162461bcd60e51b8152600401808060200182810382526026815260200180611a5a6026913960400191505060405180910390fd5b5060015b949350505050565b6000610f308484610897565b50610f3c8484846117a6565b61095a5760405162461bcd60e51b81526004018080602001828103825260258152602001806119ed6025913960400191505060405180910390fd5b6000610f1c84848460405180602001604052806000815250610ec3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610fc7611193565b6008546001600160a01b03908116911614611017576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6001600160a01b03811661105c5760405162461bcd60e51b81526004018080602001828103825260268152602001806119a56026913960400191505060405180910390fd5b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156108d0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61111d838383610c0d565b6001600160a01b038316610c0d576006546111408261113a6108d7565b906110b8565b1115610c0d576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b3390565b6001600160a01b0383166111dc5760405162461bcd60e51b8152600401808060200182810382526024815260200180611b326024913960400191505060405180910390fd5b6001600160a01b0382166112215760405162461bcd60e51b81526004018080602001828103825260228152602001806119cb6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166112c85760405162461bcd60e51b8152600401808060200182810382526025815260200180611b0d6025913960400191505060405180910390fd5b6001600160a01b03821661130d5760405162461bcd60e51b81526004018080602001828103825260238152602001806119606023913960400191505060405180910390fd5b6113188383836118d9565b61135581604051806060016040528060268152602001611a12602691396001600160a01b03861660009081526020819052604090205491906113de565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461138490826110b8565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561146d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561143257818101518382015260200161141a565b50505050905090810190601f16801561145f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000611489846001600160a01b03166118e4565b61149557506000610f1c565b6000846001600160a01b03166388a7ca5c6114ae611193565b8887876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611521578181015183820152602001611509565b50505050905090810190601f16801561154e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d602081101561159a57600080fd5b50516001600160e01b031916632229f29760e21b14915050949350505050565b6001600160a01b038216611615576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611621600083836118d9565b60025461162e90826110b8565b6002556001600160a01b03821660009081526020819052604090205461165490826110b8565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166116ef5760405162461bcd60e51b8152600401808060200182810382526021815260200180611aec6021913960400191505060405180910390fd5b6116fb826000836118d9565b61173881604051806060016040528060228152602001611983602291396001600160a01b03851660009081526020819052604090205491906113de565b6001600160a01b03831660009081526020819052604090205560025461175e908261191d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006117ba846001600160a01b03166118e4565b6117c6575060006108d0565b6000846001600160a01b0316637b04a2d06117df611193565b86866040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561184257818101518382015260200161182a565b50505050905090810190601f16801561186f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b505050506040513d60208110156118ba57600080fd5b50516001600160e01b0319166307b04a2d60e41b149150509392505050565b610c0d838383611112565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610f1c575050151592915050565b60006108d083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506113de56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f2061646472657373455243313336333a205f636865636b416e6443616c6c417070726f7665207265766572747345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365506f77657266756c45524332303a206d696e74696e672069732066696e6973686564455243313336333a205f636865636b416e6443616c6c5472616e73666572207265766572747345524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122014d3a91df13f752b5af16dbfc744fe5761492e44f72f04f6f6137d051059c58e64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063cae9ca5111610071578063cae9ca511461068d578063d8fbe99414610748578063dd62ed3e1461077e578063f2fde38b146107ac576101c4565b8063a457c2d71461056f578063a9059cbb1461059b578063c1d34b89146105c7576101c4565b80637d64bcb4116100d35780637d64bcb41461050f5780638980f11f146105175780638da5cb5b1461054357806395d89b4114610567576101c4565b806370a08231146104b5578063715018a6146104db57806379cc6790146104e3576101c4565b8063313ce56711610166578063395093511161014057806339509351146103835780634000aea0146103af57806340c10f191461046a57806342966c6814610498576101c4565b8063313ce567146103315780633177029f1461034f578063355274ea1461037b576101c4565b8063095ea7b3116101a2578063095ea7b3146102895780631296ee62146102b557806318160ddd146102e157806323b872dd146102fb576101c4565b806301ffc9a7146101c957806305d2035b1461020457806306fdde031461020c575b600080fd5b6101f0600480360360208110156101df57600080fd5b50356001600160e01b0319166107d2565b604080519115158252519081900360200190f35b6101f06107f1565b610214610801565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024e578181015183820152602001610236565b50505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f06004803603604081101561029f57600080fd5b506001600160a01b038135169060200135610897565b6101f0600480360360408110156102cb57600080fd5b506001600160a01b0381351690602001356108b4565b6102e96108d7565b60408051918252519081900360200190f35b6101f06004803603606081101561031157600080fd5b506001600160a01b038135811691602081013590911690604001356108dd565b610339610964565b6040805160ff9092168252519081900360200190f35b6101f06004803603604081101561036557600080fd5b506001600160a01b03813516906020013561096d565b6102e9610989565b6101f06004803603604081101561039957600080fd5b506001600160a01b03813516906020013561098f565b6101f0600480360360608110156103c557600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156103f557600080fd5b82018360208201111561040757600080fd5b8035906020019184600183028401116401000000008311171561042957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109dd945050505050565b6104966004803603604081101561048057600080fd5b506001600160a01b038135169060200135610a38565b005b610496600480360360208110156104ae57600080fd5b5035610ae7565b6102e9600480360360208110156104cb57600080fd5b50356001600160a01b0316610afb565b610496610b16565b610496600480360360408110156104f957600080fd5b506001600160a01b038135169060200135610bb8565b610496610c12565b6104966004803603604081101561052d57600080fd5b506001600160a01b038135169060200135610cf1565b61054b610dd7565b604080516001600160a01b039092168252519081900360200190f35b610214610de6565b6101f06004803603604081101561058557600080fd5b506001600160a01b038135169060200135610e47565b6101f0600480360360408110156105b157600080fd5b506001600160a01b038135169060200135610eaf565b6101f0600480360360808110156105dd57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561061857600080fd5b82018360208201111561062a57600080fd5b8035906020019184600183028401116401000000008311171561064c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ec3945050505050565b6101f0600480360360608110156106a357600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156106d357600080fd5b8201836020820111156106e557600080fd5b8035906020019184600183028401116401000000008311171561070757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f24945050505050565b6101f06004803603606081101561075e57600080fd5b506001600160a01b03813581169160208101359091169060400135610f77565b6102e96004803603604081101561079457600080fd5b506001600160a01b0381358116916020013516610f94565b610496600480360360208110156107c257600080fd5b50356001600160a01b0316610fbf565b6001600160e01b03191660009081526007602052604090205460ff1690565b600854600160a01b900460ff1690565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561088d5780601f106108625761010080835404028352916020019161088d565b820191906000526020600020905b81548152906001019060200180831161087057829003601f168201915b5050505050905090565b60006108ab6108a4611193565b8484611197565b50600192915050565b60006108d08383604051806020016040528060008152506109dd565b9392505050565b60025490565b60006108ea848484611283565b61095a846108f6611193565b61095585604051806060016040528060288152602001611a80602891396001600160a01b038a16600090815260016020526040812090610934611193565b6001600160a01b0316815260208101919091526040016000205491906113de565b611197565b5060019392505050565b60055460ff1690565b60006108d0838360405180602001604052806000815250610f24565b60065490565b60006108ab61099c611193565b8461095585600160006109ad611193565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906110b8565b60006109e98484610eaf565b506109fd6109f5611193565b858585611475565b61095a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a5a6026913960400191505060405180910390fd5b600854600160a01b900460ff1615610a815760405162461bcd60e51b8152600401808060200182810382526022815260200180611a386022913960400191505060405180910390fd5b610a89611193565b6008546001600160a01b03908116911614610ad9576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b610ae382826115ba565b5050565b610af8610af2611193565b826116aa565b50565b6001600160a01b031660009081526020819052604090205490565b610b1e611193565b6008546001600160a01b03908116911614610b6e576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6008546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600880546001600160a01b0319169055565b6000610bef82604051806060016040528060248152602001611ac860249139610be886610be3611193565b610f94565b91906113de565b9050610c0383610bfd611193565b83611197565b610c0d83836116aa565b505050565b600854600160a01b900460ff1615610c5b5760405162461bcd60e51b8152600401808060200182810382526022815260200180611a386022913960400191505060405180910390fd5b610c63611193565b6008546001600160a01b03908116911614610cb3576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6008805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b610cf9611193565b6008546001600160a01b03908116911614610d49576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b816001600160a01b031663a9059cbb610d60610dd7565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050506040513d6020811015610dd157600080fd5b50505050565b6008546001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561088d5780601f106108625761010080835404028352916020019161088d565b60006108ab610e54611193565b8461095585604051806060016040528060258152602001611b566025913960016000610e7e611193565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906113de565b60006108ab610ebc611193565b8484611283565b6000610ed08585856108dd565b50610edd85858585611475565b610f185760405162461bcd60e51b8152600401808060200182810382526026815260200180611a5a6026913960400191505060405180910390fd5b5060015b949350505050565b6000610f308484610897565b50610f3c8484846117a6565b61095a5760405162461bcd60e51b81526004018080602001828103825260258152602001806119ed6025913960400191505060405180910390fd5b6000610f1c84848460405180602001604052806000815250610ec3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610fc7611193565b6008546001600160a01b03908116911614611017576040805162461bcd60e51b81526020600482018190526024820152600080516020611aa8833981519152604482015290519081900360640190fd5b6001600160a01b03811661105c5760405162461bcd60e51b81526004018080602001828103825260268152602001806119a56026913960400191505060405180910390fd5b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156108d0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61111d838383610c0d565b6001600160a01b038316610c0d576006546111408261113a6108d7565b906110b8565b1115610c0d576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b3390565b6001600160a01b0383166111dc5760405162461bcd60e51b8152600401808060200182810382526024815260200180611b326024913960400191505060405180910390fd5b6001600160a01b0382166112215760405162461bcd60e51b81526004018080602001828103825260228152602001806119cb6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166112c85760405162461bcd60e51b8152600401808060200182810382526025815260200180611b0d6025913960400191505060405180910390fd5b6001600160a01b03821661130d5760405162461bcd60e51b81526004018080602001828103825260238152602001806119606023913960400191505060405180910390fd5b6113188383836118d9565b61135581604051806060016040528060268152602001611a12602691396001600160a01b03861660009081526020819052604090205491906113de565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461138490826110b8565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561146d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561143257818101518382015260200161141a565b50505050905090810190601f16801561145f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000611489846001600160a01b03166118e4565b61149557506000610f1c565b6000846001600160a01b03166388a7ca5c6114ae611193565b8887876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611521578181015183820152602001611509565b50505050905090810190601f16801561154e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d602081101561159a57600080fd5b50516001600160e01b031916632229f29760e21b14915050949350505050565b6001600160a01b038216611615576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611621600083836118d9565b60025461162e90826110b8565b6002556001600160a01b03821660009081526020819052604090205461165490826110b8565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166116ef5760405162461bcd60e51b8152600401808060200182810382526021815260200180611aec6021913960400191505060405180910390fd5b6116fb826000836118d9565b61173881604051806060016040528060228152602001611983602291396001600160a01b03851660009081526020819052604090205491906113de565b6001600160a01b03831660009081526020819052604090205560025461175e908261191d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006117ba846001600160a01b03166118e4565b6117c6575060006108d0565b6000846001600160a01b0316637b04a2d06117df611193565b86866040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561184257818101518382015260200161182a565b50505050905090810190601f16801561186f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b505050506040513d60208110156118ba57600080fd5b50516001600160e01b0319166307b04a2d60e41b149150509392505050565b610c0d838383611112565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610f1c575050151592915050565b60006108d083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506113de56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f2061646472657373455243313336333a205f636865636b416e6443616c6c417070726f7665207265766572747345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365506f77657266756c45524332303a206d696e74696e672069732066696e6973686564455243313336333a205f636865636b416e6443616c6c5472616e73666572207265766572747345524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122014d3a91df13f752b5af16dbfc744fe5761492e44f72f04f6f6137d051059c58e64736f6c63430007030033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "501:1704:7:-:0;;;;;638:37;;;-1:-1:-1;;;;638:37:7;;;963:368;;;;;;;;501:1704;963:368;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;963:368:7;;;;;;;;;;-1:-1:-1;963:368:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;963:368:7;;;;;;;;;;-1:-1:-1;963:368:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;963:368:7;;;;;;;;;;;;;;;;;;;;;;271:151:4;;;;;;;;;-1:-1:-1;;;271:151:4;;;;2078:12:17;;963:368:7;;-1:-1:-1;963:368:7;-1:-1:-1;963:368:7;;;;;;1162:4;;1168:6;;963:368;;1162:4;;1168:6;;2078:12:17;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;2100:16:17;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;2126:9:17;:14;;-1:-1:-1;;2126:14:17;2138:2;2126:14;;;-1:-1:-1;442:7:19;434:41;;;;;-1:-1:-1;;;434:41:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;485:4;:10;742:40:13;-1:-1:-1;;;742:18:13;:40::i;:::-;2126:50:22::1;-1:-1:-1::0;;;2126:18:22::1;:50::i;:::-;2186:49;-1:-1:-1::0;;;2186:18:22::1;:49::i;:::-;-1:-1:-1::0;856:17:12;;-1:-1:-1;876:12:12;:10;:12::i;:::-;898:6;:18;;-1:-1:-1;;;;;;898:18:12;-1:-1:-1;;;;;898:18:12;;;;;;;;931:43;;898:18;;-1:-1:-1;898:18:12;-1:-1:-1;;931:43:12;;-1:-1:-1;;931:43:12;831:150;371:8:4;-1:-1:-1;;;;;355:29:4;;392:9;403:11;355:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;271:151;;1254:24:7::3;1269:8;1254:14;;;:24;;:::i;:::-;1289:35;1295:12;:10;:12::i;:::-;1309:14:::0;1289:5:::3;:35::i;:::-;963:368:::0;;;;;;501:1704;;1473:198:13;-1:-1:-1;;;;;;1556:25:13;;;;;1548:66;;;;;-1:-1:-1;;;1548:66:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1624:33:13;;;;;:20;:33;;;;;:40;;-1:-1:-1;;1624:40:13;1660:4;1624:40;;;1473:198::o;590:104:11:-;677:10;590:104;:::o;10013:88:17:-;10073:9;:21;;-1:-1:-1;;10073:21:17;;;;;;;;;;;;10013:88::o;7828:370::-;-1:-1:-1;;;;;7911:21:17;;7903:65;;;;;-1:-1:-1;;;7903:65:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;:49::i;:::-;8054:24;8071:6;8054:12;;:16;;;;;;:24;;;;:::i;:::-;8039:12;:39;-1:-1:-1;;;;;8109:18:17;;:9;:18;;;;;;;;;;;;:30;;8132:6;;8109:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;8088:18:17;;:9;:18;;;;;;;;;;;:51;;;;8154:37;;;;;;;8088:18;;:9;;8154:37;;;;;;;;;;7828:370;;:::o;2024:179:7:-;2152:44;2179:4;2185:2;2189:6;2152:26;;;;;:44;;:::i;:::-;2024:179;;;:::o;874:176:16:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;874:176;-1:-1:-1;;;874:176:16:o;832:312:19:-;940:44;967:4;973:2;977:6;940:26;;;;;:44;;:::i;:::-;-1:-1:-1;;;;;999:18:19;;995:143;;1093:4;;1064:25;1082:6;1064:13;:11;:13::i;:::-;:17;;;;;;:25;;;;:::i;:::-;:33;;1056:71;;;;;-1:-1:-1;;;1056:71:19;;;;;;;;;;;;;;;;;;;;;;;;;;;3255:98:17;3334:12;;3255:98;:::o;501:1704:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;501:1704:7;;;-1:-1:-1;501:1704:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "501:1704:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:140:13;;;;;;;;;;;;;;;;-1:-1:-1;939:140:13;-1:-1:-1;;;;;;939:140:13;;:::i;:::-;;;;;;;;;;;;;;;;;;1399:94:7;;;:::i;2212:81:17:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4248:166;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4248:166:17;;;;;;;;:::i;2525:137:22:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2525:137:22;;;;;;;;:::i;3255:98:17:-;;;:::i;:::-;;;;;;;;;;;;;;;;4874:317;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4874:317:17;;;;;;;;;;;;;;;;;:::i;3114:81::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4844:145:22;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4844:145:22;;;;;;;;:::i;581:73:19:-;;;:::i;5586:215:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5586:215:17;;;;;;;;:::i;3003:272:22:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3003:272:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3003:272:22;;-1:-1:-1;3003:272:22;;-1:-1:-1;;;;;3003:272:22:i;1666:99:7:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1666:99:7;;;;;;;;:::i;:::-;;514:89:18;;;;;;;;;;;;;;;;-1:-1:-1;514:89:18;;:::i;3411:117:17:-;;;;;;;;;;;;;;;;-1:-1:-1;3411:117:17;-1:-1:-1;;;;;3411:117:17;;:::i;1680:145:12:-;;;:::i;909:290:18:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;909:290:18;;;;;;;;:::i;1836:120:7:-;;;:::i;610:150:26:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;610:150:26;;;;;;;;:::i;1057:77:12:-;;;:::i;:::-;;;;-1:-1:-1;;;;;1057:77:12;;;;;;;;;;;;;;2406:85:17;;;:::i;6288:266::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6288:266:17;;;;;;;;:::i;3731:172::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3731:172:17;;;;;;;;:::i;4254:292:22:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4254:292:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4254:292:22;;-1:-1:-1;4254:292:22;;-1:-1:-1;;;;;4254:292:22:i;5350:269::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5350:269:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5350:269:22;;-1:-1:-1;5350:269:22;;-1:-1:-1;;;;;5350:269:22:i;3652:165::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3652:165:22;;;;;;;;;;;;;;;;;:::i;3961:149:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3961:149:17;;;;;;;;;;:::i;1974:240:12:-;;;;;;;;;;;;;;;;-1:-1:-1;1974:240:12;-1:-1:-1;;;;;1974:240:12;;:::i;939:140:13:-;-1:-1:-1;;;;;;1039:33:13;1016:4;1039:33;;;:20;:33;;;;;;;;;939:140::o;1399:94:7:-;1470:16;;-1:-1:-1;;;1470:16:7;;;;;1399:94::o;2212:81:17:-;2281:5;2274:12;;;;;;;;-1:-1:-1;;2274:12:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2249:13;;2274:12;;2281:5;;2274:12;;2281:5;2274:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:81;:::o;4248:166::-;4331:4;4347:39;4356:12;:10;:12::i;:::-;4370:7;4379:6;4347:8;:39::i;:::-;-1:-1:-1;4403:4:17;4248:166;;;;:::o;2525:137:22:-;2602:4;2625:30;2641:2;2645:5;2625:30;;;;;;;;;;;;:15;:30::i;:::-;2618:37;2525:137;-1:-1:-1;;;2525:137:22:o;3255:98:17:-;3334:12;;3255:98;:::o;4874:317::-;4980:4;4996:36;5006:6;5014:9;5025:6;4996:9;:36::i;:::-;5042:121;5051:6;5059:12;:10;:12::i;:::-;5073:89;5111:6;5073:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5073:19:17;;;;;;:11;:19;;;;;;5093:12;:10;:12::i;:::-;-1:-1:-1;;;;;5073:33:17;;;;;;;;;;;;-1:-1:-1;5073:33:17;;;:89;:37;:89::i;:::-;5042:8;:121::i;:::-;-1:-1:-1;5180:4:17;4874:317;;;;;:::o;3114:81::-;3179:9;;;;3114:81;:::o;4844:145:22:-;4925:4;4948:34;4963:7;4972:5;4948:34;;;;;;;;;;;;:14;:34::i;581:73:19:-;643:4;;581:73;:::o;5586:215:17:-;5674:4;5690:83;5699:12;:10;:12::i;:::-;5713:7;5722:50;5761:10;5722:11;:25;5734:12;:10;:12::i;:::-;-1:-1:-1;;;;;5722:25:17;;;;;;;;;;;;;;;;;-1:-1:-1;5722:25:17;;;:34;;;;;;;;;;;:38;:50::i;3003:272:22:-;3099:4;3115:19;3124:2;3128:5;3115:8;:19::i;:::-;;3152:52;3174:12;:10;:12::i;:::-;3188:2;3192:5;3199:4;3152:21;:52::i;:::-;3144:103;;;;-1:-1:-1;;;3144:103:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1666:99:7;884:16;;-1:-1:-1;;;884:16:7;;;;883:17;875:64;;;;-1:-1:-1;;;875:64:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1271:12:12::1;:10;:12::i;:::-;1261:6;::::0;-1:-1:-1;;;;;1261:6:12;;::::1;:22:::0;::::1;;1253:67;;;::::0;;-1:-1:-1;;;1253:67:12;;::::1;;::::0;::::1;::::0;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;::::1;;1742:16:7::2;1748:2;1752:5;1742;:16::i;:::-;1666:99:::0;;:::o;514:89:18:-;569:27;575:12;:10;:12::i;:::-;589:6;569:5;:27::i;:::-;514:89;:::o;3411:117:17:-;-1:-1:-1;;;;;3503:18:17;3477:7;3503:18;;;;;;;;;;;;3411:117::o;1680:145:12:-;1271:12;:10;:12::i;:::-;1261:6;;-1:-1:-1;;;;;1261:6:12;;;:22;;;1253:67;;;;;-1:-1:-1;;;1253:67:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;;;1770:6:::1;::::0;1749:40:::1;::::0;1786:1:::1;::::0;-1:-1:-1;;;;;1770:6:12::1;::::0;1749:40:::1;::::0;1786:1;;1749:40:::1;1799:6;:19:::0;;-1:-1:-1;;;;;;1799:19:12::1;::::0;;1680:145::o;909:290:18:-;985:26;1014:84;1051:6;1014:84;;;;;;;;;;;;;;;;;:32;1024:7;1033:12;:10;:12::i;:::-;1014:9;:32::i;:::-;:36;:84;:36;:84::i;:::-;985:113;;1109:51;1118:7;1127:12;:10;:12::i;:::-;1141:18;1109:8;:51::i;:::-;1170:22;1176:7;1185:6;1170:5;:22::i;:::-;909:290;;;:::o;1836:120:7:-;884:16;;-1:-1:-1;;;884:16:7;;;;883:17;875:64;;;;-1:-1:-1;;;875:64:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1271:12:12::1;:10;:12::i;:::-;1261:6;::::0;-1:-1:-1;;;;;1261:6:12;;::::1;:22:::0;::::1;;1253:67;;;::::0;;-1:-1:-1;;;1253:67:12;;::::1;;::::0;::::1;::::0;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;::::1;;1896:16:7::2;:23:::0;;-1:-1:-1;;;;1896:23:7::2;-1:-1:-1::0;;;1896:23:7::2;::::0;;1935:14:::2;::::0;::::2;::::0;1896:23;;1935:14:::2;1836:120::o:0;610:150:26:-;1271:12:12;:10;:12::i;:::-;1261:6;;-1:-1:-1;;;;;1261:6:12;;;:22;;;1253:67;;;;;-1:-1:-1;;;1253:67:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;;;709:12:26::1;-1:-1:-1::0;;;;;702:29:26::1;;732:7;:5;:7::i;:::-;741:11;702:51;;;;;;;;;;;;;-1:-1:-1::0;;;;;702:51:26::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;;;;610:150:26:o;1057:77:12:-;1121:6;;-1:-1:-1;;;;;1121:6:12;1057:77;:::o;2406:85:17:-;2477:7;2470:14;;;;;;;;-1:-1:-1;;2470:14:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2445:13;;2470:14;;2477:7;;2470:14;;2477:7;2470:14;;;;;;;;;;;;;;;;;;;;;;;;6288:266;6381:4;6397:129;6406:12;:10;:12::i;:::-;6420:7;6429:96;6468:15;6429:96;;;;;;;;;;;;;;;;;:11;:25;6441:12;:10;:12::i;:::-;-1:-1:-1;;;;;6429:25:17;;;;;;;;;;;;;;;;;-1:-1:-1;6429:25:17;;;:34;;;;;;;;;;;:96;:38;:96::i;3731:172::-;3817:4;3833:42;3843:12;:10;:12::i;:::-;3857:9;3868:6;3833:9;:42::i;4254:292:22:-;4368:4;4384:29;4397:4;4403:2;4407:5;4384:12;:29::i;:::-;;4431:44;4453:4;4459:2;4463:5;4470:4;4431:21;:44::i;:::-;4423:95;;;;-1:-1:-1;;;4423:95:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4535:4:22;4254:292;;;;;;;:::o;5350:269::-;5450:4;5466:23;5474:7;5483:5;5466:7;:23::i;:::-;;5507:42;5528:7;5537:5;5544:4;5507:20;:42::i;:::-;5499:92;;;;-1:-1:-1;;;5499:92:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3652:165;3747:4;3770:40;3790:4;3796:2;3800:5;3770:40;;;;;;;;;;;;:19;:40::i;3961:149:17:-;-1:-1:-1;;;;;4076:18:17;;;4050:7;4076:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3961:149::o;1974:240:12:-;1271:12;:10;:12::i;:::-;1261:6;;-1:-1:-1;;;;;1261:6:12;;;:22;;;1253:67;;;;;-1:-1:-1;;;1253:67:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;2062:22:12;::::1;2054:73;;;;-1:-1:-1::0;;;2054:73:12::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:6;::::0;2142:38:::1;::::0;-1:-1:-1;;;;;2142:38:12;;::::1;::::0;2163:6:::1;::::0;2142:38:::1;::::0;2163:6:::1;::::0;2142:38:::1;2190:6;:17:::0;;-1:-1:-1;;;;;;2190:17:12::1;-1:-1:-1::0;;;;;2190:17:12;;;::::1;::::0;;;::::1;::::0;;1974:240::o;874:176:16:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:16;;;;;;;;;;;;;;;;;;;;;;;;;;;832:312:19;940:44;967:4;973:2;977:6;940:26;:44::i;:::-;-1:-1:-1;;;;;999:18:19;;995:143;;1093:4;;1064:25;1082:6;1064:13;:11;:13::i;:::-;:17;;:25::i;:::-;:33;;1056:71;;;;;-1:-1:-1;;;1056:71:19;;;;;;;;;;;;;;;;;;;;;;;;;;;590:104:11;677:10;590:104;:::o;9350:340:17:-;-1:-1:-1;;;;;9451:19:17;;9443:68;;;;-1:-1:-1;;;9443:68:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9529:21:17;;9521:68;;;;-1:-1:-1;;;9521:68:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9600:18:17;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9651:32;;;;;;;;;;;;;;;;;9350:340;;;:::o;7028:530::-;-1:-1:-1;;;;;7133:20:17;;7125:70;;;;-1:-1:-1;;;7125:70:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7213:23:17;;7205:71;;;;-1:-1:-1;;;7205:71:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7287:47;7308:6;7316:9;7327:6;7287:20;:47::i;:::-;7365:71;7387:6;7365:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7365:17:17;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7345:17:17;;;:9;:17;;;;;;;;;;;:91;;;;7469:20;;;;;;;:32;;7494:6;7469:24;:32::i;:::-;-1:-1:-1;;;;;7446:20:17;;;:9;:20;;;;;;;;;;;;:55;;;;7516:35;;;;;;;7446:20;;7516:35;;;;;;;;;;;;;7028:530;;;:::o;1746:187:16:-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:16;;;1746:187::o;6164:356:22:-;6273:4;6294:15;:2;-1:-1:-1;;;;;6294:13:22;;:15::i;:::-;6289:59;;-1:-1:-1;6332:5:22;6325:12;;6289:59;6357:13;6390:2;-1:-1:-1;;;;;6373:39:22;;6426:12;:10;:12::i;:::-;6440:4;6446:5;6453:4;6373:94;;;;;;;;;;;;;-1:-1:-1;;;;;6373:94:22;;;;;;-1:-1:-1;;;;;6373:94:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6373:94:22;-1:-1:-1;;;;;;6485:27:22;-1:-1:-1;;;6485:27:22;;-1:-1:-1;;6164:356:22;;;;;;:::o;7828:370:17:-;-1:-1:-1;;;;;7911:21:17;;7903:65;;;;;-1:-1:-1;;;7903:65:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;:49::i;:::-;8054:12;;:24;;8071:6;8054:16;:24::i;:::-;8039:12;:39;-1:-1:-1;;;;;8109:18:17;;:9;:18;;;;;;;;;;;:30;;8132:6;8109:22;:30::i;:::-;-1:-1:-1;;;;;8088:18:17;;:9;:18;;;;;;;;;;;:51;;;;8154:37;;;;;;;8088:18;;:9;;8154:37;;;;;;;;;;7828:370;;:::o;8517:410::-;-1:-1:-1;;;;;8600:21:17;;8592:67;;;;-1:-1:-1;;;8592:67:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8670:49;8691:7;8708:1;8712:6;8670:20;:49::i;:::-;8751:68;8774:6;8751:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8751:18:17;;:9;:18;;;;;;;;;;;;:68;:22;:68::i;:::-;-1:-1:-1;;;;;8730:18:17;;:9;:18;;;;;;;;;;:89;8844:12;;:24;;8861:6;8844:16;:24::i;:::-;8829:12;:39;8883:37;;;;;;;;8909:1;;-1:-1:-1;;;;;8883:37:17;;;;;;;;;;;;8517:410;;:::o;6969:349:22:-;7068:4;7089:20;:7;-1:-1:-1;;;;;7089:18:22;;:20::i;:::-;7084:64;;-1:-1:-1;7132:5:22;7125:12;;7084:64;7157:13;7189:7;-1:-1:-1;;;;;7173:43:22;;7230:12;:10;:12::i;:::-;7244:5;7251:4;7173:92;;;;;;;;;;;;;-1:-1:-1;;;;;7173:92:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7173:92:22;-1:-1:-1;;;;;;7283:27:22;-1:-1:-1;;;7283:27:22;;-1:-1:-1;;6969:349:22;;;;;:::o;2024:179:7:-;2152:44;2179:4;2185:2;2189:6;2152:26;:44::i;718:610:21:-;778:4;1239:20;;1084:66;1278:23;;;;;;:42;;-1:-1:-1;;1305:15:21;;;1270:51;-1:-1:-1;;718:610:21:o;1321:134:16:-;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\";\n\nimport \"erc-payable-token/contracts/token/ERC1363/ERC1363.sol\";\n\nimport \"eth-token-recover/contracts/TokenRecover.sol\";\n\nimport \"../../service/ServicePayer.sol\";\n\n/**\n * @title PowerfulERC20\n * @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n * @dev Implementation of the PowerfulERC20\n */\ncontract PowerfulERC20 is ERC20Capped, ERC20Burnable, ERC1363, TokenRecover, ServicePayer {\n\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    /**\n     * @dev Emitted during finish minting\n     */\n    event MintFinished();\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished, \"PowerfulERC20: minting is finished\");\n        _;\n    }\n\n    constructor (\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialBalance,\n        address payable feeReceiver\n    ) ERC1363(name, symbol) ERC20Capped(cap) ServicePayer(feeReceiver, \"PowerfulERC20\") payable {\n        _setupDecimals(decimals);\n\n        _mint(_msgSender(), initialBalance);\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to mint tokens.\n     * @param to The address that will receive the minted tokens\n     * @param value The amount of tokens to mint\n     */\n    function mint(address to, uint256 value) public canMint onlyOwner {\n        _mint(to, value);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() public canMint onlyOwner {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n",
  "sourcePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/PowerfulERC20.sol",
  "ast": {
    "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/PowerfulERC20.sol",
    "exportedSymbols": {
      "Address": [
        2184
      ],
      "Context": [
        712
      ],
      "ERC1363": [
        2469
      ],
      "ERC165": [
        878
      ],
      "ERC165Checker": [
        1050
      ],
      "ERC20": [
        1765
      ],
      "ERC20Burnable": [
        1824
      ],
      "ERC20Capped": [
        1902
      ],
      "IERC1363": [
        2549
      ],
      "IERC1363Receiver": [
        2567
      ],
      "IERC1363Spender": [
        2583
      ],
      "IERC165": [
        1062
      ],
      "IERC20": [
        1980
      ],
      "Ownable": [
        821
      ],
      "PowerfulERC20": [
        566
      ],
      "SafeMath": [
        1258
      ],
      "ServicePayer": [
        200
      ],
      "ServiceReceiver": [
        293
      ],
      "TokenRecover": [
        2611
      ]
    },
    "id": 567,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 430,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:7"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 431,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 1825,
        "src": "58:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "id": 432,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 1903,
        "src": "122:61:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "erc-payable-token/contracts/token/ERC1363/ERC1363.sol",
        "file": "erc-payable-token/contracts/token/ERC1363/ERC1363.sol",
        "id": 433,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 2470,
        "src": "185:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "eth-token-recover/contracts/TokenRecover.sol",
        "file": "eth-token-recover/contracts/TokenRecover.sol",
        "id": 434,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 2612,
        "src": "250:54:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol",
        "file": "../../service/ServicePayer.sol",
        "id": 435,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 201,
        "src": "306:40:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 437,
              "name": "ERC20Capped",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1902,
              "src": "527:11:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                "typeString": "contract ERC20Capped"
              }
            },
            "id": 438,
            "nodeType": "InheritanceSpecifier",
            "src": "527:11:7"
          },
          {
            "baseName": {
              "id": 439,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1824,
              "src": "540:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$1824",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 440,
            "nodeType": "InheritanceSpecifier",
            "src": "540:13:7"
          },
          {
            "baseName": {
              "id": 441,
              "name": "ERC1363",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2469,
              "src": "555:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC1363_$2469",
                "typeString": "contract ERC1363"
              }
            },
            "id": 442,
            "nodeType": "InheritanceSpecifier",
            "src": "555:7:7"
          },
          {
            "baseName": {
              "id": 443,
              "name": "TokenRecover",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2611,
              "src": "564:12:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TokenRecover_$2611",
                "typeString": "contract TokenRecover"
              }
            },
            "id": 444,
            "nodeType": "InheritanceSpecifier",
            "src": "564:12:7"
          },
          {
            "baseName": {
              "id": 445,
              "name": "ServicePayer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 200,
              "src": "578:12:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ServicePayer_$200",
                "typeString": "contract ServicePayer"
              }
            },
            "id": 446,
            "nodeType": "InheritanceSpecifier",
            "src": "578:12:7"
          }
        ],
        "contractDependencies": [
          200,
          712,
          821,
          878,
          1062,
          1765,
          1824,
          1902,
          1980,
          2469,
          2549,
          2611
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 436,
          "nodeType": "StructuredDocumentation",
          "src": "348:152:7",
          "text": " @title PowerfulERC20\n @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n @dev Implementation of the PowerfulERC20"
        },
        "fullyImplemented": true,
        "id": 566,
        "linearizedBaseContracts": [
          566,
          200,
          2611,
          821,
          2469,
          878,
          2549,
          1062,
          1824,
          1902,
          1765,
          1980,
          712
        ],
        "name": "PowerfulERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 449,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nodeType": "VariableDeclaration",
            "scope": 566,
            "src": "638:37:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 447,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "638:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 448,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "670:5:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 450,
              "nodeType": "StructuredDocumentation",
              "src": "682:53:7",
              "text": " @dev Emitted during finish minting"
            },
            "id": 452,
            "name": "MintFinished",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "758:2:7"
            },
            "src": "740:21:7"
          },
          {
            "body": {
              "id": 462,
              "nodeType": "Block",
              "src": "865:92:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "883:17:7",
                        "subExpression": {
                          "id": 456,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 449,
                          "src": "884:16:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f77657266756c45524332303a206d696e74696e672069732066696e6973686564",
                        "id": 458,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "902:36:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49de2e4144c90085a185985d1d3a1afc335b51e1d39412e6e5ddf5ec71b69667",
                          "typeString": "literal_string \"PowerfulERC20: minting is finished\""
                        },
                        "value": "PowerfulERC20: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49de2e4144c90085a185985d1d3a1afc335b51e1d39412e6e5ddf5ec71b69667",
                          "typeString": "literal_string \"PowerfulERC20: minting is finished\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "875:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "875:64:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 460,
                  "nodeType": "ExpressionStatement",
                  "src": "875:64:7"
                },
                {
                  "id": 461,
                  "nodeType": "PlaceholderStatement",
                  "src": "949:1:7"
                }
              ]
            },
            "documentation": {
              "id": 453,
              "nodeType": "StructuredDocumentation",
              "src": "767:74:7",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 463,
            "name": "canMint",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:2:7"
            },
            "src": "846:111:7",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 499,
              "nodeType": "Block",
              "src": "1244:87:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 490,
                        "name": "decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 469,
                        "src": "1269:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 489,
                      "name": "_setupDecimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1753,
                      "src": "1254:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$__$",
                        "typeString": "function (uint8)"
                      }
                    },
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1254:24:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 492,
                  "nodeType": "ExpressionStatement",
                  "src": "1254:24:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 494,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 700,
                          "src": "1295:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1295:12:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 496,
                        "name": "initialBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 473,
                        "src": "1309:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 493,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1289:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1289:35:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 498,
                  "nodeType": "ExpressionStatement",
                  "src": "1289:35:7"
                }
              ]
            },
            "id": 500,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 478,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 465,
                    "src": "1162:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 479,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 467,
                    "src": "1168:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 480,
                "modifierName": {
                  "id": 477,
                  "name": "ERC1363",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2469,
                  "src": "1154:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC1363_$2469_$",
                    "typeString": "type(contract ERC1363)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1154:21:7"
              },
              {
                "arguments": [
                  {
                    "id": 482,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 471,
                    "src": "1188:3:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 483,
                "modifierName": {
                  "id": 481,
                  "name": "ERC20Capped",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1902,
                  "src": "1176:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Capped_$1902_$",
                    "typeString": "type(contract ERC20Capped)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1176:16:7"
              },
              {
                "arguments": [
                  {
                    "id": 485,
                    "name": "feeReceiver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 475,
                    "src": "1206:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "hexValue": "506f77657266756c4552433230",
                    "id": 486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1219:15:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_74889d9b590f174684d89f38aa1279716d0db3cad16c0c90389eca60f179a77c",
                      "typeString": "literal_string \"PowerfulERC20\""
                    },
                    "value": "PowerfulERC20"
                  }
                ],
                "id": 487,
                "modifierName": {
                  "id": 484,
                  "name": "ServicePayer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 200,
                  "src": "1193:12:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ServicePayer_$200_$",
                    "typeString": "type(contract ServicePayer)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1193:42:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 465,
                  "mutability": "mutable",
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "985:18:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 464,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "985:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 467,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1013:20:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 466,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1013:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1043:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1043:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 471,
                  "mutability": "mutable",
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1067:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1067:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 473,
                  "mutability": "mutable",
                  "name": "initialBalance",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1088:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1088:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "feeReceiver",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1120:27:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1120:15:7",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "975:178:7"
            },
            "returnParameters": {
              "id": 488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1244:0:7"
            },
            "scope": 566,
            "src": "963:368:7",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 508,
              "nodeType": "Block",
              "src": "1453:40:7",
              "statements": [
                {
                  "expression": {
                    "id": 506,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 449,
                    "src": "1470:16:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 505,
                  "id": 507,
                  "nodeType": "Return",
                  "src": "1463:23:7"
                }
              ]
            },
            "documentation": {
              "id": 501,
              "nodeType": "StructuredDocumentation",
              "src": "1337:57:7",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 509,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 502,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:2:7"
            },
            "returnParameters": {
              "id": 505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 504,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 509,
                  "src": "1447:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 503,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1447:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1446:6:7"
            },
            "scope": 566,
            "src": "1399:94:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 526,
              "nodeType": "Block",
              "src": "1732:33:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 522,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 512,
                        "src": "1748:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 523,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 514,
                        "src": "1752:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 521,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1742:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1742:16:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 525,
                  "nodeType": "ExpressionStatement",
                  "src": "1742:16:7"
                }
              ]
            },
            "documentation": {
              "id": 510,
              "nodeType": "StructuredDocumentation",
              "src": "1499:162:7",
              "text": " @dev Function to mint tokens.\n @param to The address that will receive the minted tokens\n @param value The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 527,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 517,
                "modifierName": {
                  "id": 516,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 463,
                  "src": "1714:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1714:7:7"
              },
              {
                "id": 519,
                "modifierName": {
                  "id": 518,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1722:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1722:9:7"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 512,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "1680:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 511,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1680:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 514,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "1692:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 513,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1692:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1679:27:7"
            },
            "returnParameters": {
              "id": 520,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:0:7"
            },
            "scope": 566,
            "src": "1666:99:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 542,
              "nodeType": "Block",
              "src": "1886:70:7",
              "statements": [
                {
                  "expression": {
                    "id": 537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 535,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 449,
                      "src": "1896:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 536,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1915:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1896:23:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 538,
                  "nodeType": "ExpressionStatement",
                  "src": "1896:23:7"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 539,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 452,
                      "src": "1935:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1935:14:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 541,
                  "nodeType": "EmitStatement",
                  "src": "1930:19:7"
                }
              ]
            },
            "documentation": {
              "id": 528,
              "nodeType": "StructuredDocumentation",
              "src": "1771:60:7",
              "text": " @dev Function to stop minting new tokens."
            },
            "functionSelector": "7d64bcb4",
            "id": 543,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 531,
                "modifierName": {
                  "id": 530,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 463,
                  "src": "1868:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1868:7:7"
              },
              {
                "id": 533,
                "modifierName": {
                  "id": 532,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1876:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1876:9:7"
              }
            ],
            "name": "finishMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 529,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1858:2:7"
            },
            "returnParameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1886:0:7"
            },
            "scope": 566,
            "src": "1836:120:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1764,
              1901
            ],
            "body": {
              "id": 564,
              "nodeType": "Block",
              "src": "2142:61:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 559,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 546,
                        "src": "2179:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 560,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 548,
                        "src": "2185:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 561,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 550,
                        "src": "2189:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 556,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2152:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_PowerfulERC20_$566",
                          "typeString": "contract super PowerfulERC20"
                        }
                      },
                      "id": 558,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1901,
                      "src": "2152:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 562,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2152:44:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 563,
                  "nodeType": "ExpressionStatement",
                  "src": "2152:44:7"
                }
              ]
            },
            "documentation": {
              "id": 544,
              "nodeType": "StructuredDocumentation",
              "src": "1962:57:7",
              "text": " @dev See {ERC20-_beforeTokenTransfer}."
            },
            "id": 565,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 554,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 552,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1765,
                  "src": "2122:5:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$1765",
                    "typeString": "contract ERC20"
                  }
                },
                {
                  "id": 553,
                  "name": "ERC20Capped",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1902,
                  "src": "2129:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                    "typeString": "contract ERC20Capped"
                  }
                }
              ],
              "src": "2113:28:7"
            },
            "parameters": {
              "id": 551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2054:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2054:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 548,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2068:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 547,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2068:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 550,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2080:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 549,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2080:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2053:42:7"
            },
            "returnParameters": {
              "id": 555,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2142:0:7"
            },
            "scope": 566,
            "src": "2024:179:7",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 567,
        "src": "501:1704:7"
      }
    ],
    "src": "33:2173:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/PowerfulERC20.sol",
    "exportedSymbols": {
      "Address": [
        2184
      ],
      "Context": [
        712
      ],
      "ERC1363": [
        2469
      ],
      "ERC165": [
        878
      ],
      "ERC165Checker": [
        1050
      ],
      "ERC20": [
        1765
      ],
      "ERC20Burnable": [
        1824
      ],
      "ERC20Capped": [
        1902
      ],
      "IERC1363": [
        2549
      ],
      "IERC1363Receiver": [
        2567
      ],
      "IERC1363Spender": [
        2583
      ],
      "IERC165": [
        1062
      ],
      "IERC20": [
        1980
      ],
      "Ownable": [
        821
      ],
      "PowerfulERC20": [
        566
      ],
      "SafeMath": [
        1258
      ],
      "ServicePayer": [
        200
      ],
      "ServiceReceiver": [
        293
      ],
      "TokenRecover": [
        2611
      ]
    },
    "id": 567,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 430,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:7"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 431,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 1825,
        "src": "58:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "id": 432,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 1903,
        "src": "122:61:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "erc-payable-token/contracts/token/ERC1363/ERC1363.sol",
        "file": "erc-payable-token/contracts/token/ERC1363/ERC1363.sol",
        "id": 433,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 2470,
        "src": "185:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "eth-token-recover/contracts/TokenRecover.sol",
        "file": "eth-token-recover/contracts/TokenRecover.sol",
        "id": 434,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 2612,
        "src": "250:54:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol",
        "file": "../../service/ServicePayer.sol",
        "id": 435,
        "nodeType": "ImportDirective",
        "scope": 567,
        "sourceUnit": 201,
        "src": "306:40:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 437,
              "name": "ERC20Capped",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1902,
              "src": "527:11:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                "typeString": "contract ERC20Capped"
              }
            },
            "id": 438,
            "nodeType": "InheritanceSpecifier",
            "src": "527:11:7"
          },
          {
            "baseName": {
              "id": 439,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1824,
              "src": "540:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$1824",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 440,
            "nodeType": "InheritanceSpecifier",
            "src": "540:13:7"
          },
          {
            "baseName": {
              "id": 441,
              "name": "ERC1363",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2469,
              "src": "555:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC1363_$2469",
                "typeString": "contract ERC1363"
              }
            },
            "id": 442,
            "nodeType": "InheritanceSpecifier",
            "src": "555:7:7"
          },
          {
            "baseName": {
              "id": 443,
              "name": "TokenRecover",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2611,
              "src": "564:12:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TokenRecover_$2611",
                "typeString": "contract TokenRecover"
              }
            },
            "id": 444,
            "nodeType": "InheritanceSpecifier",
            "src": "564:12:7"
          },
          {
            "baseName": {
              "id": 445,
              "name": "ServicePayer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 200,
              "src": "578:12:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ServicePayer_$200",
                "typeString": "contract ServicePayer"
              }
            },
            "id": 446,
            "nodeType": "InheritanceSpecifier",
            "src": "578:12:7"
          }
        ],
        "contractDependencies": [
          200,
          712,
          821,
          878,
          1062,
          1765,
          1824,
          1902,
          1980,
          2469,
          2549,
          2611
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 436,
          "nodeType": "StructuredDocumentation",
          "src": "348:152:7",
          "text": " @title PowerfulERC20\n @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n @dev Implementation of the PowerfulERC20"
        },
        "fullyImplemented": true,
        "id": 566,
        "linearizedBaseContracts": [
          566,
          200,
          2611,
          821,
          2469,
          878,
          2549,
          1062,
          1824,
          1902,
          1765,
          1980,
          712
        ],
        "name": "PowerfulERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 449,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nodeType": "VariableDeclaration",
            "scope": 566,
            "src": "638:37:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 447,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "638:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 448,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "670:5:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 450,
              "nodeType": "StructuredDocumentation",
              "src": "682:53:7",
              "text": " @dev Emitted during finish minting"
            },
            "id": 452,
            "name": "MintFinished",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "758:2:7"
            },
            "src": "740:21:7"
          },
          {
            "body": {
              "id": 462,
              "nodeType": "Block",
              "src": "865:92:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "883:17:7",
                        "subExpression": {
                          "id": 456,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 449,
                          "src": "884:16:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f77657266756c45524332303a206d696e74696e672069732066696e6973686564",
                        "id": 458,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "902:36:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49de2e4144c90085a185985d1d3a1afc335b51e1d39412e6e5ddf5ec71b69667",
                          "typeString": "literal_string \"PowerfulERC20: minting is finished\""
                        },
                        "value": "PowerfulERC20: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49de2e4144c90085a185985d1d3a1afc335b51e1d39412e6e5ddf5ec71b69667",
                          "typeString": "literal_string \"PowerfulERC20: minting is finished\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "875:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "875:64:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 460,
                  "nodeType": "ExpressionStatement",
                  "src": "875:64:7"
                },
                {
                  "id": 461,
                  "nodeType": "PlaceholderStatement",
                  "src": "949:1:7"
                }
              ]
            },
            "documentation": {
              "id": 453,
              "nodeType": "StructuredDocumentation",
              "src": "767:74:7",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 463,
            "name": "canMint",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:2:7"
            },
            "src": "846:111:7",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 499,
              "nodeType": "Block",
              "src": "1244:87:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 490,
                        "name": "decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 469,
                        "src": "1269:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 489,
                      "name": "_setupDecimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1753,
                      "src": "1254:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$__$",
                        "typeString": "function (uint8)"
                      }
                    },
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1254:24:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 492,
                  "nodeType": "ExpressionStatement",
                  "src": "1254:24:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 494,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 700,
                          "src": "1295:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1295:12:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 496,
                        "name": "initialBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 473,
                        "src": "1309:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 493,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1289:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1289:35:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 498,
                  "nodeType": "ExpressionStatement",
                  "src": "1289:35:7"
                }
              ]
            },
            "id": 500,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 478,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 465,
                    "src": "1162:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 479,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 467,
                    "src": "1168:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 480,
                "modifierName": {
                  "id": 477,
                  "name": "ERC1363",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2469,
                  "src": "1154:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC1363_$2469_$",
                    "typeString": "type(contract ERC1363)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1154:21:7"
              },
              {
                "arguments": [
                  {
                    "id": 482,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 471,
                    "src": "1188:3:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 483,
                "modifierName": {
                  "id": 481,
                  "name": "ERC20Capped",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1902,
                  "src": "1176:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Capped_$1902_$",
                    "typeString": "type(contract ERC20Capped)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1176:16:7"
              },
              {
                "arguments": [
                  {
                    "id": 485,
                    "name": "feeReceiver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 475,
                    "src": "1206:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "hexValue": "506f77657266756c4552433230",
                    "id": 486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1219:15:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_74889d9b590f174684d89f38aa1279716d0db3cad16c0c90389eca60f179a77c",
                      "typeString": "literal_string \"PowerfulERC20\""
                    },
                    "value": "PowerfulERC20"
                  }
                ],
                "id": 487,
                "modifierName": {
                  "id": 484,
                  "name": "ServicePayer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 200,
                  "src": "1193:12:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ServicePayer_$200_$",
                    "typeString": "type(contract ServicePayer)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1193:42:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 465,
                  "mutability": "mutable",
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "985:18:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 464,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "985:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 467,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1013:20:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 466,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1013:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1043:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1043:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 471,
                  "mutability": "mutable",
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1067:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1067:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 473,
                  "mutability": "mutable",
                  "name": "initialBalance",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1088:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1088:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "feeReceiver",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "1120:27:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1120:15:7",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "975:178:7"
            },
            "returnParameters": {
              "id": 488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1244:0:7"
            },
            "scope": 566,
            "src": "963:368:7",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 508,
              "nodeType": "Block",
              "src": "1453:40:7",
              "statements": [
                {
                  "expression": {
                    "id": 506,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 449,
                    "src": "1470:16:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 505,
                  "id": 507,
                  "nodeType": "Return",
                  "src": "1463:23:7"
                }
              ]
            },
            "documentation": {
              "id": 501,
              "nodeType": "StructuredDocumentation",
              "src": "1337:57:7",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 509,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 502,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:2:7"
            },
            "returnParameters": {
              "id": 505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 504,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 509,
                  "src": "1447:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 503,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1447:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1446:6:7"
            },
            "scope": 566,
            "src": "1399:94:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 526,
              "nodeType": "Block",
              "src": "1732:33:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 522,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 512,
                        "src": "1748:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 523,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 514,
                        "src": "1752:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 521,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1742:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1742:16:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 525,
                  "nodeType": "ExpressionStatement",
                  "src": "1742:16:7"
                }
              ]
            },
            "documentation": {
              "id": 510,
              "nodeType": "StructuredDocumentation",
              "src": "1499:162:7",
              "text": " @dev Function to mint tokens.\n @param to The address that will receive the minted tokens\n @param value The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 527,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 517,
                "modifierName": {
                  "id": 516,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 463,
                  "src": "1714:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1714:7:7"
              },
              {
                "id": 519,
                "modifierName": {
                  "id": 518,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1722:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1722:9:7"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 512,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "1680:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 511,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1680:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 514,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "1692:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 513,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1692:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1679:27:7"
            },
            "returnParameters": {
              "id": 520,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:0:7"
            },
            "scope": 566,
            "src": "1666:99:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 542,
              "nodeType": "Block",
              "src": "1886:70:7",
              "statements": [
                {
                  "expression": {
                    "id": 537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 535,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 449,
                      "src": "1896:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 536,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1915:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1896:23:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 538,
                  "nodeType": "ExpressionStatement",
                  "src": "1896:23:7"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 539,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 452,
                      "src": "1935:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1935:14:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 541,
                  "nodeType": "EmitStatement",
                  "src": "1930:19:7"
                }
              ]
            },
            "documentation": {
              "id": 528,
              "nodeType": "StructuredDocumentation",
              "src": "1771:60:7",
              "text": " @dev Function to stop minting new tokens."
            },
            "functionSelector": "7d64bcb4",
            "id": 543,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 531,
                "modifierName": {
                  "id": 530,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 463,
                  "src": "1868:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1868:7:7"
              },
              {
                "id": 533,
                "modifierName": {
                  "id": 532,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1876:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1876:9:7"
              }
            ],
            "name": "finishMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 529,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1858:2:7"
            },
            "returnParameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1886:0:7"
            },
            "scope": 566,
            "src": "1836:120:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1764,
              1901
            ],
            "body": {
              "id": 564,
              "nodeType": "Block",
              "src": "2142:61:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 559,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 546,
                        "src": "2179:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 560,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 548,
                        "src": "2185:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 561,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 550,
                        "src": "2189:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 556,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2152:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_PowerfulERC20_$566",
                          "typeString": "contract super PowerfulERC20"
                        }
                      },
                      "id": 558,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1901,
                      "src": "2152:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 562,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2152:44:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 563,
                  "nodeType": "ExpressionStatement",
                  "src": "2152:44:7"
                }
              ]
            },
            "documentation": {
              "id": 544,
              "nodeType": "StructuredDocumentation",
              "src": "1962:57:7",
              "text": " @dev See {ERC20-_beforeTokenTransfer}."
            },
            "id": 565,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 554,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 552,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1765,
                  "src": "2122:5:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$1765",
                    "typeString": "contract ERC20"
                  }
                },
                {
                  "id": 553,
                  "name": "ERC20Capped",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1902,
                  "src": "2129:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                    "typeString": "contract ERC20Capped"
                  }
                }
              ],
              "src": "2113:28:7"
            },
            "parameters": {
              "id": 551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2054:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2054:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 548,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2068:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 547,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2068:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 550,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 565,
                  "src": "2080:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 549,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2080:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2053:42:7"
            },
            "returnParameters": {
              "id": 555,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2142:0:7"
            },
            "scope": 566,
            "src": "2024:179:7",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 567,
        "src": "501:1704:7"
      }
    ],
    "src": "33:2173:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.3+commit.9bfce1f6.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.1",
  "updatedAt": "2020-10-17T12:17:50.943Z",
  "devdoc": {
    "author": "ERC20 Generator (https://vittominacori.github.io/erc20-generator)",
    "details": "Implementation of the PowerfulERC20",
    "events": {
      "MintFinished()": {
        "details": "Emitted during finish minting"
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "approveAndCall(address,uint256)": {
        "details": "Approve spender to transfer tokens and then execute a callback on recipient.",
        "params": {
          "spender": "The address allowed to transfer to",
          "value": "The amount allowed to be transferred"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Approve spender to transfer tokens and then execute a callback on recipient.",
        "params": {
          "data": "Additional data with no specified format.",
          "spender": "The address allowed to transfer to.",
          "value": "The amount allowed to be transferred."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "finishMinting()": {
        "details": "Function to stop minting new tokens."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens",
          "value": "The amount of tokens to mint"
        }
      },
      "mintingFinished()": {
        "returns": {
          "_0": "if minting is finished or not."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,uint256)": {
        "details": "Remember that only owner can call so be careful when use on contracts generated from other contracts.",
        "params": {
          "tokenAddress": "The token contract address",
          "tokenAmount": "Number of tokens to be sent"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferAndCall(address,uint256)": {
        "details": "Transfer tokens to a specified address and then execute a callback on recipient.",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Transfer tokens to a specified address and then execute a callback on recipient.",
        "params": {
          "data": "Additional data with no specified format",
          "to": "The address to transfer to",
          "value": "The amount to be transferred"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferFromAndCall(address,address,uint256)": {
        "details": "Transfer tokens from one address to another and then execute a callback on recipient.",
        "params": {
          "from": "The address which you want to send tokens from",
          "to": "The address which you want to transfer to",
          "value": "The amount of tokens to be transferred"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "transferFromAndCall(address,address,uint256,bytes)": {
        "details": "Transfer tokens from one address to another and then execute a callback on recipient.",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which you want to send tokens from",
          "to": "The address which you want to transfer to",
          "value": "The amount of tokens to be transferred"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PowerfulERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}