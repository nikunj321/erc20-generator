{
  "contractName": "CommonERC20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialBalance",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ERC20 Generator (https://vittominacori.github.io/erc20-generator)\",\"details\":\"Implementation of the CommonERC20\",\"events\":{\"MintFinished()\":{\"details\":\"Emitted during finish minting\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens\",\"value\":\"The amount of tokens to mint\"}},\"mintingFinished()\":{\"returns\":{\"_0\":\"if minting is finished or not.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CommonERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/CommonERC20.sol\":\"CommonERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol\":{\"keccak256\":\"0xa19fd1188176a41cc851fe30e970b717c10d232ceefea0bd35cc124456364a1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed6c2e3c2f3dfa9aeaf5d3cbd350ae39231fa1bbe497f736ad85c5125d650ba6\",\"dweb:/ipfs/QmP2yDxh7zYf6nDm8zKwCsiwbti13zrXeB444Cni6wGt7V\"]},\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServiceReceiver.sol\":{\"keccak256\":\"0xd14e07a225f6354acdb4401da277c964a2a99c60145c5ddcecd9d53962e9659c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57b53570318170bb30da8175a45d00682aa24722fc5703478dc10dc4ede57a3b\",\"dweb:/ipfs/QmbkBAuWyp7wFbXEFRafbLj9VtwUn8sJs9nx2jqwBfzqLs\"]},\"/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/CommonERC20.sol\":{\"keccak256\":\"0x2c6507883e0dccb0c8b339da2cb3408a0ff05e7fd672855f03994391dcd79622\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7e894800a667e554aa4d761a591f69486d0952f0751423ffee7259de2e1b628\",\"dweb:/ipfs/QmR9vBdRMDF3NEUu2C55r5Ug5UyKov5FKUjgQWmSvmcin6\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c\",\"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cd0b71a794900681c8bcc255599fac53c211fc6a530a58d7dd7246bfde6c4f5\",\"dweb:/ipfs/QmdAB1mFyuN2i25DRf9szWgp1FLCByqJ4F8aYzXWe3mfTR\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f\",\"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d527ba022dc8eb272c76aa637913aa261e37847e5b465404328af1916fec55e2\",\"dweb:/ipfs/Qmei5afXj1pbucjpi7N3Epjb4o5AuzYXsSaUgYZmdPJHbu\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"keccak256\":\"0xe4180240b62082d70cffb0a0964699273195cd7c013f1d294dfe18d5e981dffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a74d9e8b7d904012eb345f5b483c6c521bd935e9801a403871a0469e699efae\",\"dweb:/ipfs/Qmeqm5iXdXTue6vJAaC7htFBxnENMTtWr3BM5JVZJT5RP1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"keccak256\":\"0x6d34fcf105a37da8aa0b7f4b38e99edd3db75c1e03565707439c77912f583cf6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://544bfa8988da4e4ec282f88712d57abaf0fc417a527f0b7f9fa9dd23d446d859\",\"dweb:/ipfs/QmVNeeXHDSChvx3eLmE3XyDzcZ7Z4JAe1s6XqPRZ6aUABR\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4bd4c9419d1182612ef415c60a83a9039b227fccb799937963448114c0473b58\",\"dweb:/ipfs/Qmat1U571v55F5JDDHHX7igGcmLF8Ehk9CzsWpjbdx3RTH\"]},\"eth-token-recover/contracts/TokenRecover.sol\":{\"keccak256\":\"0x21cac11370b63473f1e656810829385167695277c945f599f75e2295a9269ec1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0d7ee54c6e06f5876ba8613a2d488db2a7b871b2bc8c82dd632e707a3754bd1\",\"dweb:/ipfs/Qmdvs2rHXkawFpmsByWteLWorpCy8pHP5esTZtycXPWaik\"]}},\"version\":1}",
  "bytecode": "0x608060408190526007805460ff60a01b191690556200195e38819003908190833981810160405260c08110156200003557600080fd5b81019080805160405193929190846401000000008211156200005657600080fd5b9083019060208201858111156200006c57600080fd5b82516401000000008111828201881017156200008757600080fd5b82525081516020918201929091019080838360005b83811015620000b65781810151838201526020016200009c565b50505050905090810190601f168015620000e45780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010857600080fd5b9083019060208201858111156200011e57600080fd5b82516401000000008111828201881017156200013957600080fd5b82525081516020918201929091019080838360005b83811015620001685781810151838201526020016200014e565b50505050905090810190601f168015620001965780820380516001836020036101000a031916815260200191505b506040818152602083810151848301516060860151608090960151858501909452600b85526a0436f6d6d6f6e45524332360ac1b838601528951919750955091928392909186918a918a91620001f3916003919085019062000612565b5080516200020990600490602084019062000612565b50506005805460ff1916601217905550806200026c576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b60065560006200027b620003c3565b600780546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350816001600160a01b0316632b66d72e34836040518363ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003285781810151838201526020016200030e565b50505050905090810190601f168015620003565780820380516001836020036101000a031916815260200191505b50925050506000604051808303818588803b1580156200037557600080fd5b505af11580156200038a573d6000803e3d6000fd5b50505050505050620003a284620003c760201b60201c565b620003b7620003b0620003c3565b83620003dd565b505050505050620006ae565b3390565b6005805460ff191660ff92909216919091179055565b6001600160a01b03821662000439576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200044760008383620004ec565b62000463816002546200050960201b62000abf1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200049691839062000abf62000509821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b620005048383836200056b60201b62000b201760201c565b505050565b60008282018381101562000564576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b620005838383836200050460201b620007b51760201c565b6001600160a01b0383166200050457600654620005b882620005a46200060c565b6200050960201b62000abf1790919060201c565b111562000504576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b60025490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200065557805160ff191683800117855562000685565b8280016001018555821562000685579182015b828111156200068557825182559160200191906001019062000668565b506200069392915062000697565b5090565b5b8082111562000693576000815560010162000698565b6112a080620006be6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad57806395d89b411161007157806395d89b4114610369578063a457c2d714610371578063a9059cbb1461039d578063dd62ed3e146103c9578063f2fde38b146103f75761012c565b806370a08231146102e3578063715018a61461030957806379cc6790146103115780637d64bcb41461033d5780638da5cb5b146103455761012c565b8063313ce567116100f4578063313ce56714610246578063355274ea14610264578063395093511461026c57806340c10f191461029857806342966c68146102c65761012c565b806305d2035b1461013157806306fdde031461014d578063095ea7b3146101ca57806318160ddd146101f657806323b872dd14610210575b600080fd5b61013961041d565b604080519115158252519081900360200190f35b61015561042d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018f578181015183820152602001610177565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610139600480360360408110156101e057600080fd5b506001600160a01b0381351690602001356104c3565b6101fe6104e0565b60408051918252519081900360200190f35b6101396004803603606081101561022657600080fd5b506001600160a01b038135811691602081013590911690604001356104e6565b61024e61056d565b6040805160ff9092168252519081900360200190f35b6101fe610576565b6101396004803603604081101561028257600080fd5b506001600160a01b03813516906020013561057c565b6102c4600480360360408110156102ae57600080fd5b506001600160a01b0381351690602001356105ca565b005b6102c4600480360360208110156102dc57600080fd5b503561068f565b6101fe600480360360208110156102f957600080fd5b50356001600160a01b03166106a3565b6102c46106be565b6102c46004803603604081101561032757600080fd5b506001600160a01b038135169060200135610760565b6102c46107ba565b61034d6108af565b604080516001600160a01b039092168252519081900360200190f35b6101556108be565b6101396004803603604081101561038757600080fd5b506001600160a01b03813516906020013561091f565b610139600480360360408110156103b357600080fd5b506001600160a01b038135169060200135610987565b6101fe600480360360408110156103df57600080fd5b506001600160a01b038135811691602001351661099b565b6102c46004803603602081101561040d57600080fd5b50356001600160a01b03166109c6565b600754600160a01b900460ff1690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b95780601f1061048e576101008083540402835291602001916104b9565b820191906000526020600020905b81548152906001019060200180831161049c57829003601f168201915b5050505050905090565b60006104d76104d0610ba1565b8484610ba5565b50600192915050565b60025490565b60006104f3848484610c91565b610563846104ff610ba1565b61055e85604051806060016040528060288152602001611170602891396001600160a01b038a1660009081526001602052604081209061053d610ba1565b6001600160a01b031681526020810191909152604001600020549190610dec565b610ba5565b5060019392505050565b60055460ff1690565b60065490565b60006104d7610589610ba1565b8461055e856001600061059a610ba1565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610abf565b600754600160a01b900460ff1615610629576040805162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564604482015290519081900360640190fd5b610631610ba1565b6007546001600160a01b03908116911614610681576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b61068b8282610e83565b5050565b6106a061069a610ba1565b82610f73565b50565b6001600160a01b031660009081526020819052604090205490565b6106c6610ba1565b6007546001600160a01b03908116911614610716576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6007546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600780546001600160a01b0319169055565b6000610797826040518060600160405280602481526020016111b8602491396107908661078b610ba1565b61099b565b9190610dec565b90506107ab836107a5610ba1565b83610ba5565b6107b58383610f73565b505050565b600754600160a01b900460ff1615610819576040805162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564604482015290519081900360640190fd5b610821610ba1565b6007546001600160a01b03908116911614610871576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6007805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b6007546001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b95780601f1061048e576101008083540402835291602001916104b9565b60006104d761092c610ba1565b8461055e856040518060600160405280602581526020016112466025913960016000610956610ba1565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610dec565b60006104d7610994610ba1565b8484610c91565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6109ce610ba1565b6007546001600160a01b03908116911614610a1e576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6001600160a01b038116610a635760405162461bcd60e51b81526004018080602001828103825260268152602001806111026026913960400191505060405180910390fd5b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b600082820183811015610b19576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b610b2b8383836107b5565b6001600160a01b0383166107b557600654610b4e82610b486104e0565b90610abf565b11156107b5576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b3390565b6001600160a01b038316610bea5760405162461bcd60e51b81526004018080602001828103825260248152602001806112226024913960400191505060405180910390fd5b6001600160a01b038216610c2f5760405162461bcd60e51b81526004018080602001828103825260228152602001806111286022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610cd65760405162461bcd60e51b81526004018080602001828103825260258152602001806111fd6025913960400191505060405180910390fd5b6001600160a01b038216610d1b5760405162461bcd60e51b81526004018080602001828103825260238152602001806110bd6023913960400191505060405180910390fd5b610d2683838361106f565b610d638160405180606001604052806026815260200161114a602691396001600160a01b0386166000908152602081905260409020549190610dec565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610d929082610abf565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610e7b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e40578181015183820152602001610e28565b50505050905090810190601f168015610e6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610ede576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610eea6000838361106f565b600254610ef79082610abf565b6002556001600160a01b038216600090815260208190526040902054610f1d9082610abf565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610fb85760405162461bcd60e51b81526004018080602001828103825260218152602001806111dc6021913960400191505060405180910390fd5b610fc48260008361106f565b611001816040518060600160405280602281526020016110e0602291396001600160a01b0385166000908152602081905260409020549190610dec565b6001600160a01b038316600090815260208190526040902055600254611027908261107a565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6107b5838383610b20565b6000610b1983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dec56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201dd283b68cc2ec7a9dfd7b5baa796aa2ad831ef2a86037eb12fbd35096c17e1164736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad57806395d89b411161007157806395d89b4114610369578063a457c2d714610371578063a9059cbb1461039d578063dd62ed3e146103c9578063f2fde38b146103f75761012c565b806370a08231146102e3578063715018a61461030957806379cc6790146103115780637d64bcb41461033d5780638da5cb5b146103455761012c565b8063313ce567116100f4578063313ce56714610246578063355274ea14610264578063395093511461026c57806340c10f191461029857806342966c68146102c65761012c565b806305d2035b1461013157806306fdde031461014d578063095ea7b3146101ca57806318160ddd146101f657806323b872dd14610210575b600080fd5b61013961041d565b604080519115158252519081900360200190f35b61015561042d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018f578181015183820152602001610177565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610139600480360360408110156101e057600080fd5b506001600160a01b0381351690602001356104c3565b6101fe6104e0565b60408051918252519081900360200190f35b6101396004803603606081101561022657600080fd5b506001600160a01b038135811691602081013590911690604001356104e6565b61024e61056d565b6040805160ff9092168252519081900360200190f35b6101fe610576565b6101396004803603604081101561028257600080fd5b506001600160a01b03813516906020013561057c565b6102c4600480360360408110156102ae57600080fd5b506001600160a01b0381351690602001356105ca565b005b6102c4600480360360208110156102dc57600080fd5b503561068f565b6101fe600480360360208110156102f957600080fd5b50356001600160a01b03166106a3565b6102c46106be565b6102c46004803603604081101561032757600080fd5b506001600160a01b038135169060200135610760565b6102c46107ba565b61034d6108af565b604080516001600160a01b039092168252519081900360200190f35b6101556108be565b6101396004803603604081101561038757600080fd5b506001600160a01b03813516906020013561091f565b610139600480360360408110156103b357600080fd5b506001600160a01b038135169060200135610987565b6101fe600480360360408110156103df57600080fd5b506001600160a01b038135811691602001351661099b565b6102c46004803603602081101561040d57600080fd5b50356001600160a01b03166109c6565b600754600160a01b900460ff1690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b95780601f1061048e576101008083540402835291602001916104b9565b820191906000526020600020905b81548152906001019060200180831161049c57829003601f168201915b5050505050905090565b60006104d76104d0610ba1565b8484610ba5565b50600192915050565b60025490565b60006104f3848484610c91565b610563846104ff610ba1565b61055e85604051806060016040528060288152602001611170602891396001600160a01b038a1660009081526001602052604081209061053d610ba1565b6001600160a01b031681526020810191909152604001600020549190610dec565b610ba5565b5060019392505050565b60055460ff1690565b60065490565b60006104d7610589610ba1565b8461055e856001600061059a610ba1565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610abf565b600754600160a01b900460ff1615610629576040805162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564604482015290519081900360640190fd5b610631610ba1565b6007546001600160a01b03908116911614610681576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b61068b8282610e83565b5050565b6106a061069a610ba1565b82610f73565b50565b6001600160a01b031660009081526020819052604090205490565b6106c6610ba1565b6007546001600160a01b03908116911614610716576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6007546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600780546001600160a01b0319169055565b6000610797826040518060600160405280602481526020016111b8602491396107908661078b610ba1565b61099b565b9190610dec565b90506107ab836107a5610ba1565b83610ba5565b6107b58383610f73565b505050565b600754600160a01b900460ff1615610819576040805162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564604482015290519081900360640190fd5b610821610ba1565b6007546001600160a01b03908116911614610871576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6007805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b6007546001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b95780601f1061048e576101008083540402835291602001916104b9565b60006104d761092c610ba1565b8461055e856040518060600160405280602581526020016112466025913960016000610956610ba1565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610dec565b60006104d7610994610ba1565b8484610c91565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6109ce610ba1565b6007546001600160a01b03908116911614610a1e576040805162461bcd60e51b81526020600482018190526024820152600080516020611198833981519152604482015290519081900360640190fd5b6001600160a01b038116610a635760405162461bcd60e51b81526004018080602001828103825260268152602001806111026026913960400191505060405180910390fd5b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b600082820183811015610b19576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b610b2b8383836107b5565b6001600160a01b0383166107b557600654610b4e82610b486104e0565b90610abf565b11156107b5576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b3390565b6001600160a01b038316610bea5760405162461bcd60e51b81526004018080602001828103825260248152602001806112226024913960400191505060405180910390fd5b6001600160a01b038216610c2f5760405162461bcd60e51b81526004018080602001828103825260228152602001806111286022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610cd65760405162461bcd60e51b81526004018080602001828103825260258152602001806111fd6025913960400191505060405180910390fd5b6001600160a01b038216610d1b5760405162461bcd60e51b81526004018080602001828103825260238152602001806110bd6023913960400191505060405180910390fd5b610d2683838361106f565b610d638160405180606001604052806026815260200161114a602691396001600160a01b0386166000908152602081905260409020549190610dec565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610d929082610abf565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610e7b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e40578181015183820152602001610e28565b50505050905090810190601f168015610e6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610ede576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610eea6000838361106f565b600254610ef79082610abf565b6002556001600160a01b038216600090815260208190526040902054610f1d9082610abf565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610fb85760405162461bcd60e51b81526004018080602001828103825260218152602001806111dc6021913960400191505060405180910390fd5b610fc48260008361106f565b611001816040518060600160405280602281526020016110e0602291396001600160a01b0385166000908152602081905260409020549190610dec565b6001600160a01b038316600090815260208190526040902055600254611027908261107a565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6107b5838383610b20565b6000610b1983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dec56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201dd283b68cc2ec7a9dfd7b5baa796aa2ad831ef2a86037eb12fbd35096c17e1164736f6c63430007030033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "429:1682:6:-:0;;;;;550:37;;;-1:-1:-1;;;;550:37:6;;;873:364;;;;;;;;429:1682;873:364;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;873:364:6;;;;;;;;;;-1:-1:-1;873:364:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;873:364:6;;;;;;;;;;-1:-1:-1;873:364:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;873:364:6;;;;;;;;;;;;;;;;;;;;;;271:151:4;;;;;;;;;-1:-1:-1;;;271:151:4;;;;2078:12:17;;873:364:6;;-1:-1:-1;873:364:6;-1:-1:-1;873:364:6;;;;;;;;1070:4;;1076:6;;2078:12:17;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;2100:16:17;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;2126:9:17;:14;;-1:-1:-1;;2126:14:17;2138:2;2126:14;;;-1:-1:-1;442:7:19;434:41;;;;;-1:-1:-1;;;434:41:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;485:4;:10;856:17:12;876:12;:10;:12::i;:::-;898:6;:18;;-1:-1:-1;;;;;;898:18:12;-1:-1:-1;;;;;898:18:12;;;;;;;;931:43;;898:18;;-1:-1:-1;898:18:12;-1:-1:-1;;931:43:12;;-1:-1:-1;;931:43:12;831:150;371:8:4;-1:-1:-1;;;;;355:29:4;;392:9;403:11;355:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;271:151;;1160:24:6::3;1175:8;1160:14;;;:24;;:::i;:::-;1195:35;1201:12;:10;:12::i;:::-;1215:14:::0;1195:5:::3;:35::i;:::-;873:364:::0;;;;;;429:1682;;590:104:11;677:10;590:104;:::o;10013:88:17:-;10073:9;:21;;-1:-1:-1;;10073:21:17;;;;;;;;;;;;10013:88::o;7828:370::-;-1:-1:-1;;;;;7911:21:17;;7903:65;;;;;-1:-1:-1;;;7903:65:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;:49::i;:::-;8054:24;8071:6;8054:12;;:16;;;;;;:24;;;;:::i;:::-;8039:12;:39;-1:-1:-1;;;;;8109:18:17;;:9;:18;;;;;;;;;;;;:30;;8132:6;;8109:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;8088:18:17;;:9;:18;;;;;;;;;;;:51;;;;8154:37;;;;;;;8088:18;;:9;;8154:37;;;;;;;;;;7828:370;;:::o;1930:179:6:-;2058:44;2085:4;2091:2;2095:6;2058:26;;;;;:44;;:::i;:::-;1930:179;;;:::o;874:176:16:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;874:176;-1:-1:-1;;;874:176:16:o;832:312:19:-;940:44;967:4;973:2;977:6;940:26;;;;;:44;;:::i;:::-;-1:-1:-1;;;;;999:18:19;;995:143;;1093:4;;1064:25;1082:6;1064:13;:11;:13::i;:::-;:17;;;;;;:25;;;;:::i;:::-;:33;;1056:71;;;;;-1:-1:-1;;;1056:71:19;;;;;;;;;;;;;;;;;;;;;;;;;;;3255:98:17;3334:12;;3255:98;:::o;429:1682:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;429:1682:6;;;-1:-1:-1;429:1682:6;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "429:1682:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1305:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;2212:81:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4248:166;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4248:166:17;;;;;;;;:::i;3255:98::-;;;:::i;:::-;;;;;;;;;;;;;;;;4874:317;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4874:317:17;;;;;;;;;;;;;;;;;:::i;3114:81::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;581:73:19;;;:::i;5586:215:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5586:215:17;;;;;;;;:::i;1572:99:6:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1572:99:6;;;;;;;;:::i;:::-;;514:89:18;;;;;;;;;;;;;;;;-1:-1:-1;514:89:18;;:::i;3411:117:17:-;;;;;;;;;;;;;;;;-1:-1:-1;3411:117:17;-1:-1:-1;;;;;3411:117:17;;:::i;1680:145:12:-;;;:::i;909:290:18:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;909:290:18;;;;;;;;:::i;1742:120:6:-;;;:::i;1057:77:12:-;;;:::i;:::-;;;;-1:-1:-1;;;;;1057:77:12;;;;;;;;;;;;;;2406:85:17;;;:::i;6288:266::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6288:266:17;;;;;;;;:::i;3731:172::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3731:172:17;;;;;;;;:::i;3961:149::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3961:149:17;;;;;;;;;;:::i;1974:240:12:-;;;;;;;;;;;;;;;;-1:-1:-1;1974:240:12;-1:-1:-1;;;;;1974:240:12;;:::i;1305:94:6:-;1376:16;;-1:-1:-1;;;1376:16:6;;;;;1305:94::o;2212:81:17:-;2281:5;2274:12;;;;;;;;-1:-1:-1;;2274:12:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2249:13;;2274:12;;2281:5;;2274:12;;2281:5;2274:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:81;:::o;4248:166::-;4331:4;4347:39;4356:12;:10;:12::i;:::-;4370:7;4379:6;4347:8;:39::i;:::-;-1:-1:-1;4403:4:17;4248:166;;;;:::o;3255:98::-;3334:12;;3255:98;:::o;4874:317::-;4980:4;4996:36;5006:6;5014:9;5025:6;4996:9;:36::i;:::-;5042:121;5051:6;5059:12;:10;:12::i;:::-;5073:89;5111:6;5073:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5073:19:17;;;;;;:11;:19;;;;;;5093:12;:10;:12::i;:::-;-1:-1:-1;;;;;5073:33:17;;;;;;;;;;;;-1:-1:-1;5073:33:17;;;:89;:37;:89::i;:::-;5042:8;:121::i;:::-;-1:-1:-1;5180:4:17;4874:317;;;;;:::o;3114:81::-;3179:9;;;;3114:81;:::o;581:73:19:-;643:4;;581:73;:::o;5586:215:17:-;5674:4;5690:83;5699:12;:10;:12::i;:::-;5713:7;5722:50;5761:10;5722:11;:25;5734:12;:10;:12::i;:::-;-1:-1:-1;;;;;5722:25:17;;;;;;;;;;;;;;;;;-1:-1:-1;5722:25:17;;;:34;;;;;;;;;;;:38;:50::i;1572:99:6:-;796:16;;-1:-1:-1;;;796:16:6;;;;795:17;787:62;;;;;-1:-1:-1;;;787:62:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1271:12:12::1;:10;:12::i;:::-;1261:6;::::0;-1:-1:-1;;;;;1261:6:12;;::::1;:22:::0;::::1;;1253:67;;;::::0;;-1:-1:-1;;;1253:67:12;;::::1;;::::0;::::1;::::0;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;::::1;;1648:16:6::2;1654:2;1658:5;1648;:16::i;:::-;1572:99:::0;;:::o;514:89:18:-;569:27;575:12;:10;:12::i;:::-;589:6;569:5;:27::i;:::-;514:89;:::o;3411:117:17:-;-1:-1:-1;;;;;3503:18:17;3477:7;3503:18;;;;;;;;;;;;3411:117::o;1680:145:12:-;1271:12;:10;:12::i;:::-;1261:6;;-1:-1:-1;;;;;1261:6:12;;;:22;;;1253:67;;;;;-1:-1:-1;;;1253:67:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;;;1770:6:::1;::::0;1749:40:::1;::::0;1786:1:::1;::::0;-1:-1:-1;;;;;1770:6:12::1;::::0;1749:40:::1;::::0;1786:1;;1749:40:::1;1799:6;:19:::0;;-1:-1:-1;;;;;;1799:19:12::1;::::0;;1680:145::o;909:290:18:-;985:26;1014:84;1051:6;1014:84;;;;;;;;;;;;;;;;;:32;1024:7;1033:12;:10;:12::i;:::-;1014:9;:32::i;:::-;:36;:84;:36;:84::i;:::-;985:113;;1109:51;1118:7;1127:12;:10;:12::i;:::-;1141:18;1109:8;:51::i;:::-;1170:22;1176:7;1185:6;1170:5;:22::i;:::-;909:290;;;:::o;1742:120:6:-;796:16;;-1:-1:-1;;;796:16:6;;;;795:17;787:62;;;;;-1:-1:-1;;;787:62:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1271:12:12::1;:10;:12::i;:::-;1261:6;::::0;-1:-1:-1;;;;;1261:6:12;;::::1;:22:::0;::::1;;1253:67;;;::::0;;-1:-1:-1;;;1253:67:12;;::::1;;::::0;::::1;::::0;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;::::1;;1802:16:6::2;:23:::0;;-1:-1:-1;;;;1802:23:6::2;-1:-1:-1::0;;;1802:23:6::2;::::0;;1841:14:::2;::::0;::::2;::::0;1802:23;;1841:14:::2;1742:120::o:0;1057:77:12:-;1121:6;;-1:-1:-1;;;;;1121:6:12;1057:77;:::o;2406:85:17:-;2477:7;2470:14;;;;;;;;-1:-1:-1;;2470:14:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2445:13;;2470:14;;2477:7;;2470:14;;2477:7;2470:14;;;;;;;;;;;;;;;;;;;;;;;;6288:266;6381:4;6397:129;6406:12;:10;:12::i;:::-;6420:7;6429:96;6468:15;6429:96;;;;;;;;;;;;;;;;;:11;:25;6441:12;:10;:12::i;:::-;-1:-1:-1;;;;;6429:25:17;;;;;;;;;;;;;;;;;-1:-1:-1;6429:25:17;;;:34;;;;;;;;;;;:96;:38;:96::i;3731:172::-;3817:4;3833:42;3843:12;:10;:12::i;:::-;3857:9;3868:6;3833:9;:42::i;3961:149::-;-1:-1:-1;;;;;4076:18:17;;;4050:7;4076:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3961:149::o;1974:240:12:-;1271:12;:10;:12::i;:::-;1261:6;;-1:-1:-1;;;;;1261:6:12;;;:22;;;1253:67;;;;;-1:-1:-1;;;1253:67:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1253:67:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;2062:22:12;::::1;2054:73;;;;-1:-1:-1::0;;;2054:73:12::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:6;::::0;2142:38:::1;::::0;-1:-1:-1;;;;;2142:38:12;;::::1;::::0;2163:6:::1;::::0;2142:38:::1;::::0;2163:6:::1;::::0;2142:38:::1;2190:6;:17:::0;;-1:-1:-1;;;;;;2190:17:12::1;-1:-1:-1::0;;;;;2190:17:12;;;::::1;::::0;;;::::1;::::0;;1974:240::o;874:176:16:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;874:176;-1:-1:-1;;;874:176:16:o;832:312:19:-;940:44;967:4;973:2;977:6;940:26;:44::i;:::-;-1:-1:-1;;;;;999:18:19;;995:143;;1093:4;;1064:25;1082:6;1064:13;:11;:13::i;:::-;:17;;:25::i;:::-;:33;;1056:71;;;;;-1:-1:-1;;;1056:71:19;;;;;;;;;;;;;;;;;;;;;;;;;;;590:104:11;677:10;590:104;:::o;9350:340:17:-;-1:-1:-1;;;;;9451:19:17;;9443:68;;;;-1:-1:-1;;;9443:68:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9529:21:17;;9521:68;;;;-1:-1:-1;;;9521:68:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9600:18:17;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9651:32;;;;;;;;;;;;;;;;;9350:340;;;:::o;7028:530::-;-1:-1:-1;;;;;7133:20:17;;7125:70;;;;-1:-1:-1;;;7125:70:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7213:23:17;;7205:71;;;;-1:-1:-1;;;7205:71:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7287:47;7308:6;7316:9;7327:6;7287:20;:47::i;:::-;7365:71;7387:6;7365:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7365:17:17;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7345:17:17;;;:9;:17;;;;;;;;;;;:91;;;;7469:20;;;;;;;:32;;7494:6;7469:24;:32::i;:::-;-1:-1:-1;;;;;7446:20:17;;;:9;:20;;;;;;;;;;;;:55;;;;7516:35;;;;;;;7446:20;;7516:35;;;;;;;;;;;;;7028:530;;;:::o;1746:187:16:-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:16;;;1746:187::o;7828:370:17:-;-1:-1:-1;;;;;7911:21:17;;7903:65;;;;;-1:-1:-1;;;7903:65:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;:49::i;:::-;8054:12;;:24;;8071:6;8054:16;:24::i;:::-;8039:12;:39;-1:-1:-1;;;;;8109:18:17;;:9;:18;;;;;;;;;;;:30;;8132:6;8109:22;:30::i;:::-;-1:-1:-1;;;;;8088:18:17;;:9;:18;;;;;;;;;;;:51;;;;8154:37;;;;;;;8088:18;;:9;;8154:37;;;;;;;;;;7828:370;;:::o;8517:410::-;-1:-1:-1;;;;;8600:21:17;;8592:67;;;;-1:-1:-1;;;8592:67:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8670:49;8691:7;8708:1;8712:6;8670:20;:49::i;:::-;8751:68;8774:6;8751:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8751:18:17;;:9;:18;;;;;;;;;;;;:68;:22;:68::i;:::-;-1:-1:-1;;;;;8730:18:17;;:9;:18;;;;;;;;;;:89;8844:12;;:24;;8861:6;8844:16;:24::i;:::-;8829:12;:39;8883:37;;;;;;;;8909:1;;-1:-1:-1;;;;;8883:37:17;;;;;;;;;;;;8517:410;;:::o;1930:179:6:-;2058:44;2085:4;2091:2;2095:6;2058:26;:44::i;1321:134:16:-;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\";\n\nimport \"../../service/ServicePayer.sol\";\n\n/**\n * @title CommonERC20\n * @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n * @dev Implementation of the CommonERC20\n */\ncontract CommonERC20 is ERC20Capped, ERC20Burnable, Ownable, ServicePayer {\n\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    /**\n     * @dev Emitted during finish minting\n     */\n    event MintFinished();\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished, \"CommonERC20: minting is finished\");\n        _;\n    }\n\n    constructor (\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialBalance,\n        address payable feeReceiver\n    ) ERC20(name, symbol) ERC20Capped(cap) ServicePayer(feeReceiver, \"CommonERC20\") payable {\n        _setupDecimals(decimals);\n\n        _mint(_msgSender(), initialBalance);\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to mint tokens.\n     * @param to The address that will receive the minted tokens\n     * @param value The amount of tokens to mint\n     */\n    function mint(address to, uint256 value) public canMint onlyOwner {\n        _mint(to, value);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() public canMint onlyOwner {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n",
  "sourcePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/CommonERC20.sol",
  "ast": {
    "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/CommonERC20.sol",
    "exportedSymbols": {
      "Address": [
        2184
      ],
      "CommonERC20": [
        428
      ],
      "Context": [
        712
      ],
      "ERC20": [
        1765
      ],
      "ERC20Burnable": [
        1824
      ],
      "ERC20Capped": [
        1902
      ],
      "IERC20": [
        1980
      ],
      "Ownable": [
        821
      ],
      "SafeMath": [
        1258
      ],
      "ServicePayer": [
        200
      ],
      "ServiceReceiver": [
        293
      ],
      "TokenRecover": [
        2611
      ]
    },
    "id": 429,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 295,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:6"
      },
      {
        "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 296,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 822,
        "src": "58:52:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 297,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 1825,
        "src": "111:63:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "id": 298,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 1903,
        "src": "175:61:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol",
        "file": "../../service/ServicePayer.sol",
        "id": 299,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 201,
        "src": "238:40:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 301,
              "name": "ERC20Capped",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1902,
              "src": "453:11:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                "typeString": "contract ERC20Capped"
              }
            },
            "id": 302,
            "nodeType": "InheritanceSpecifier",
            "src": "453:11:6"
          },
          {
            "baseName": {
              "id": 303,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1824,
              "src": "466:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$1824",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 304,
            "nodeType": "InheritanceSpecifier",
            "src": "466:13:6"
          },
          {
            "baseName": {
              "id": 305,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 821,
              "src": "481:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$821",
                "typeString": "contract Ownable"
              }
            },
            "id": 306,
            "nodeType": "InheritanceSpecifier",
            "src": "481:7:6"
          },
          {
            "baseName": {
              "id": 307,
              "name": "ServicePayer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 200,
              "src": "490:12:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ServicePayer_$200",
                "typeString": "contract ServicePayer"
              }
            },
            "id": 308,
            "nodeType": "InheritanceSpecifier",
            "src": "490:12:6"
          }
        ],
        "contractDependencies": [
          200,
          712,
          821,
          1765,
          1824,
          1902,
          1980
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 300,
          "nodeType": "StructuredDocumentation",
          "src": "280:148:6",
          "text": " @title CommonERC20\n @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n @dev Implementation of the CommonERC20"
        },
        "fullyImplemented": true,
        "id": 428,
        "linearizedBaseContracts": [
          428,
          200,
          821,
          1824,
          1902,
          1765,
          1980,
          712
        ],
        "name": "CommonERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 311,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "550:37:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 309,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "550:4:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 310,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "582:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 312,
              "nodeType": "StructuredDocumentation",
              "src": "594:53:6",
              "text": " @dev Emitted during finish minting"
            },
            "id": 314,
            "name": "MintFinished",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 313,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "670:2:6"
            },
            "src": "652:21:6"
          },
          {
            "body": {
              "id": 324,
              "nodeType": "Block",
              "src": "777:90:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 319,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "795:17:6",
                        "subExpression": {
                          "id": 318,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "796:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564",
                        "id": 320,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "814:34:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c6311528c1dc605d6dd1fc91c3624c7d362b971aab3dc9d77fb2a6f6e6b6f53a",
                          "typeString": "literal_string \"CommonERC20: minting is finished\""
                        },
                        "value": "CommonERC20: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c6311528c1dc605d6dd1fc91c3624c7d362b971aab3dc9d77fb2a6f6e6b6f53a",
                          "typeString": "literal_string \"CommonERC20: minting is finished\""
                        }
                      ],
                      "id": 317,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "787:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 321,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "787:62:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 322,
                  "nodeType": "ExpressionStatement",
                  "src": "787:62:6"
                },
                {
                  "id": 323,
                  "nodeType": "PlaceholderStatement",
                  "src": "859:1:6"
                }
              ]
            },
            "documentation": {
              "id": 315,
              "nodeType": "StructuredDocumentation",
              "src": "679:74:6",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 325,
            "name": "canMint",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 316,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "774:2:6"
            },
            "src": "758:109:6",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 361,
              "nodeType": "Block",
              "src": "1150:87:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 352,
                        "name": "decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 331,
                        "src": "1175:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 351,
                      "name": "_setupDecimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1753,
                      "src": "1160:14:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$__$",
                        "typeString": "function (uint8)"
                      }
                    },
                    "id": 353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1160:24:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 354,
                  "nodeType": "ExpressionStatement",
                  "src": "1160:24:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 356,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 700,
                          "src": "1201:10:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1201:12:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 358,
                        "name": "initialBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 335,
                        "src": "1215:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 355,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1195:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 359,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1195:35:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 360,
                  "nodeType": "ExpressionStatement",
                  "src": "1195:35:6"
                }
              ]
            },
            "id": 362,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 340,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 327,
                    "src": "1070:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 341,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 329,
                    "src": "1076:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 342,
                "modifierName": {
                  "id": 339,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1765,
                  "src": "1064:5:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$1765_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1064:19:6"
              },
              {
                "arguments": [
                  {
                    "id": 344,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 333,
                    "src": "1096:3:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 345,
                "modifierName": {
                  "id": 343,
                  "name": "ERC20Capped",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1902,
                  "src": "1084:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Capped_$1902_$",
                    "typeString": "type(contract ERC20Capped)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1084:16:6"
              },
              {
                "arguments": [
                  {
                    "id": 347,
                    "name": "feeReceiver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 337,
                    "src": "1114:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "hexValue": "436f6d6d6f6e4552433230",
                    "id": 348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1127:13:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_bf2f5e6787117dbc35d59f9490f23b0517df4507b2571263cf05d32cd213ad52",
                      "typeString": "literal_string \"CommonERC20\""
                    },
                    "value": "CommonERC20"
                  }
                ],
                "id": 349,
                "modifierName": {
                  "id": 346,
                  "name": "ServicePayer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 200,
                  "src": "1101:12:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ServicePayer_$200_$",
                    "typeString": "type(contract ServicePayer)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1101:40:6"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 327,
                  "mutability": "mutable",
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "895:18:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 326,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "895:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 329,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "923:20:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 328,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "923:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 331,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "953:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 330,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "953:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 333,
                  "mutability": "mutable",
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "977:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "977:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 335,
                  "mutability": "mutable",
                  "name": "initialBalance",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "998:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 334,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "998:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 337,
                  "mutability": "mutable",
                  "name": "feeReceiver",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "1030:27:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 336,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:15:6",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "885:178:6"
            },
            "returnParameters": {
              "id": 350,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1150:0:6"
            },
            "scope": 428,
            "src": "873:364:6",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 370,
              "nodeType": "Block",
              "src": "1359:40:6",
              "statements": [
                {
                  "expression": {
                    "id": 368,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 311,
                    "src": "1376:16:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 367,
                  "id": 369,
                  "nodeType": "Return",
                  "src": "1369:23:6"
                }
              ]
            },
            "documentation": {
              "id": 363,
              "nodeType": "StructuredDocumentation",
              "src": "1243:57:6",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 371,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1329:2:6"
            },
            "returnParameters": {
              "id": 367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 366,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1353:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 365,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1353:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1352:6:6"
            },
            "scope": 428,
            "src": "1305:94:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 388,
              "nodeType": "Block",
              "src": "1638:33:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 384,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 374,
                        "src": "1654:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 385,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 376,
                        "src": "1658:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 383,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1648:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 386,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1648:16:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 387,
                  "nodeType": "ExpressionStatement",
                  "src": "1648:16:6"
                }
              ]
            },
            "documentation": {
              "id": 372,
              "nodeType": "StructuredDocumentation",
              "src": "1405:162:6",
              "text": " @dev Function to mint tokens.\n @param to The address that will receive the minted tokens\n @param value The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 389,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 379,
                "modifierName": {
                  "id": 378,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 325,
                  "src": "1620:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1620:7:6"
              },
              {
                "id": 381,
                "modifierName": {
                  "id": 380,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1628:9:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1628:9:6"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 377,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 374,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 389,
                  "src": "1586:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 373,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1586:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 376,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 389,
                  "src": "1598:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 375,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1598:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1585:27:6"
            },
            "returnParameters": {
              "id": 382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1638:0:6"
            },
            "scope": 428,
            "src": "1572:99:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 404,
              "nodeType": "Block",
              "src": "1792:70:6",
              "statements": [
                {
                  "expression": {
                    "id": 399,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 397,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 311,
                      "src": "1802:16:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 398,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1821:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1802:23:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 400,
                  "nodeType": "ExpressionStatement",
                  "src": "1802:23:6"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 401,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 314,
                      "src": "1841:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 402,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1841:14:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 403,
                  "nodeType": "EmitStatement",
                  "src": "1836:19:6"
                }
              ]
            },
            "documentation": {
              "id": 390,
              "nodeType": "StructuredDocumentation",
              "src": "1677:60:6",
              "text": " @dev Function to stop minting new tokens."
            },
            "functionSelector": "7d64bcb4",
            "id": 405,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 393,
                "modifierName": {
                  "id": 392,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 325,
                  "src": "1774:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1774:7:6"
              },
              {
                "id": 395,
                "modifierName": {
                  "id": 394,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1782:9:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1782:9:6"
              }
            ],
            "name": "finishMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:2:6"
            },
            "returnParameters": {
              "id": 396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1792:0:6"
            },
            "scope": 428,
            "src": "1742:120:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1764,
              1901
            ],
            "body": {
              "id": 426,
              "nodeType": "Block",
              "src": "2048:61:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 421,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 408,
                        "src": "2085:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 422,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "2091:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 423,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "2095:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 418,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2058:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_CommonERC20_$428",
                          "typeString": "contract super CommonERC20"
                        }
                      },
                      "id": 420,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1901,
                      "src": "2058:26:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2058:44:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 425,
                  "nodeType": "ExpressionStatement",
                  "src": "2058:44:6"
                }
              ]
            },
            "documentation": {
              "id": 406,
              "nodeType": "StructuredDocumentation",
              "src": "1868:57:6",
              "text": " @dev See {ERC20-_beforeTokenTransfer}."
            },
            "id": 427,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 416,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 414,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1765,
                  "src": "2028:5:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$1765",
                    "typeString": "contract ERC20"
                  }
                },
                {
                  "id": 415,
                  "name": "ERC20Capped",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1902,
                  "src": "2035:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                    "typeString": "contract ERC20Capped"
                  }
                }
              ],
              "src": "2019:28:6"
            },
            "parameters": {
              "id": 413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1960:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1960:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 410,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1974:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1974:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 412,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1986:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1986:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1959:42:6"
            },
            "returnParameters": {
              "id": 417,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2048:0:6"
            },
            "scope": 428,
            "src": "1930:179:6",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 429,
        "src": "429:1682:6"
      }
    ],
    "src": "33:2079:6"
  },
  "legacyAST": {
    "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/token/ERC20/CommonERC20.sol",
    "exportedSymbols": {
      "Address": [
        2184
      ],
      "CommonERC20": [
        428
      ],
      "Context": [
        712
      ],
      "ERC20": [
        1765
      ],
      "ERC20Burnable": [
        1824
      ],
      "ERC20Capped": [
        1902
      ],
      "IERC20": [
        1980
      ],
      "Ownable": [
        821
      ],
      "SafeMath": [
        1258
      ],
      "ServicePayer": [
        200
      ],
      "ServiceReceiver": [
        293
      ],
      "TokenRecover": [
        2611
      ]
    },
    "id": 429,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 295,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:6"
      },
      {
        "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 296,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 822,
        "src": "58:52:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 297,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 1825,
        "src": "111:63:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol",
        "id": 298,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 1903,
        "src": "175:61:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vittominacori/Projects/vittominacori.github.io/erc20-generator/erc20-generator-smartcontracts/contracts/service/ServicePayer.sol",
        "file": "../../service/ServicePayer.sol",
        "id": 299,
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 201,
        "src": "238:40:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 301,
              "name": "ERC20Capped",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1902,
              "src": "453:11:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                "typeString": "contract ERC20Capped"
              }
            },
            "id": 302,
            "nodeType": "InheritanceSpecifier",
            "src": "453:11:6"
          },
          {
            "baseName": {
              "id": 303,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1824,
              "src": "466:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$1824",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 304,
            "nodeType": "InheritanceSpecifier",
            "src": "466:13:6"
          },
          {
            "baseName": {
              "id": 305,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 821,
              "src": "481:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$821",
                "typeString": "contract Ownable"
              }
            },
            "id": 306,
            "nodeType": "InheritanceSpecifier",
            "src": "481:7:6"
          },
          {
            "baseName": {
              "id": 307,
              "name": "ServicePayer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 200,
              "src": "490:12:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ServicePayer_$200",
                "typeString": "contract ServicePayer"
              }
            },
            "id": 308,
            "nodeType": "InheritanceSpecifier",
            "src": "490:12:6"
          }
        ],
        "contractDependencies": [
          200,
          712,
          821,
          1765,
          1824,
          1902,
          1980
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 300,
          "nodeType": "StructuredDocumentation",
          "src": "280:148:6",
          "text": " @title CommonERC20\n @author ERC20 Generator (https://vittominacori.github.io/erc20-generator)\n @dev Implementation of the CommonERC20"
        },
        "fullyImplemented": true,
        "id": 428,
        "linearizedBaseContracts": [
          428,
          200,
          821,
          1824,
          1902,
          1765,
          1980,
          712
        ],
        "name": "CommonERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 311,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "550:37:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 309,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "550:4:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 310,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "582:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 312,
              "nodeType": "StructuredDocumentation",
              "src": "594:53:6",
              "text": " @dev Emitted during finish minting"
            },
            "id": 314,
            "name": "MintFinished",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 313,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "670:2:6"
            },
            "src": "652:21:6"
          },
          {
            "body": {
              "id": 324,
              "nodeType": "Block",
              "src": "777:90:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 319,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "795:17:6",
                        "subExpression": {
                          "id": 318,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "796:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "436f6d6d6f6e45524332303a206d696e74696e672069732066696e6973686564",
                        "id": 320,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "814:34:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c6311528c1dc605d6dd1fc91c3624c7d362b971aab3dc9d77fb2a6f6e6b6f53a",
                          "typeString": "literal_string \"CommonERC20: minting is finished\""
                        },
                        "value": "CommonERC20: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c6311528c1dc605d6dd1fc91c3624c7d362b971aab3dc9d77fb2a6f6e6b6f53a",
                          "typeString": "literal_string \"CommonERC20: minting is finished\""
                        }
                      ],
                      "id": 317,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "787:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 321,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "787:62:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 322,
                  "nodeType": "ExpressionStatement",
                  "src": "787:62:6"
                },
                {
                  "id": 323,
                  "nodeType": "PlaceholderStatement",
                  "src": "859:1:6"
                }
              ]
            },
            "documentation": {
              "id": 315,
              "nodeType": "StructuredDocumentation",
              "src": "679:74:6",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 325,
            "name": "canMint",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 316,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "774:2:6"
            },
            "src": "758:109:6",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 361,
              "nodeType": "Block",
              "src": "1150:87:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 352,
                        "name": "decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 331,
                        "src": "1175:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 351,
                      "name": "_setupDecimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1753,
                      "src": "1160:14:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$__$",
                        "typeString": "function (uint8)"
                      }
                    },
                    "id": 353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1160:24:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 354,
                  "nodeType": "ExpressionStatement",
                  "src": "1160:24:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 356,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 700,
                          "src": "1201:10:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1201:12:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 358,
                        "name": "initialBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 335,
                        "src": "1215:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 355,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1195:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 359,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1195:35:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 360,
                  "nodeType": "ExpressionStatement",
                  "src": "1195:35:6"
                }
              ]
            },
            "id": 362,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 340,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 327,
                    "src": "1070:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 341,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 329,
                    "src": "1076:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 342,
                "modifierName": {
                  "id": 339,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1765,
                  "src": "1064:5:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$1765_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1064:19:6"
              },
              {
                "arguments": [
                  {
                    "id": 344,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 333,
                    "src": "1096:3:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 345,
                "modifierName": {
                  "id": 343,
                  "name": "ERC20Capped",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1902,
                  "src": "1084:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Capped_$1902_$",
                    "typeString": "type(contract ERC20Capped)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1084:16:6"
              },
              {
                "arguments": [
                  {
                    "id": 347,
                    "name": "feeReceiver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 337,
                    "src": "1114:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "hexValue": "436f6d6d6f6e4552433230",
                    "id": 348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1127:13:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_bf2f5e6787117dbc35d59f9490f23b0517df4507b2571263cf05d32cd213ad52",
                      "typeString": "literal_string \"CommonERC20\""
                    },
                    "value": "CommonERC20"
                  }
                ],
                "id": 349,
                "modifierName": {
                  "id": 346,
                  "name": "ServicePayer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 200,
                  "src": "1101:12:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ServicePayer_$200_$",
                    "typeString": "type(contract ServicePayer)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1101:40:6"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 327,
                  "mutability": "mutable",
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "895:18:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 326,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "895:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 329,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "923:20:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 328,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "923:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 331,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "953:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 330,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "953:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 333,
                  "mutability": "mutable",
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "977:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "977:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 335,
                  "mutability": "mutable",
                  "name": "initialBalance",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "998:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 334,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "998:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 337,
                  "mutability": "mutable",
                  "name": "feeReceiver",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "1030:27:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 336,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:15:6",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "885:178:6"
            },
            "returnParameters": {
              "id": 350,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1150:0:6"
            },
            "scope": 428,
            "src": "873:364:6",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 370,
              "nodeType": "Block",
              "src": "1359:40:6",
              "statements": [
                {
                  "expression": {
                    "id": 368,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 311,
                    "src": "1376:16:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 367,
                  "id": 369,
                  "nodeType": "Return",
                  "src": "1369:23:6"
                }
              ]
            },
            "documentation": {
              "id": 363,
              "nodeType": "StructuredDocumentation",
              "src": "1243:57:6",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 371,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1329:2:6"
            },
            "returnParameters": {
              "id": 367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 366,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1353:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 365,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1353:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1352:6:6"
            },
            "scope": 428,
            "src": "1305:94:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 388,
              "nodeType": "Block",
              "src": "1638:33:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 384,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 374,
                        "src": "1654:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 385,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 376,
                        "src": "1658:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 383,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "1648:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 386,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1648:16:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 387,
                  "nodeType": "ExpressionStatement",
                  "src": "1648:16:6"
                }
              ]
            },
            "documentation": {
              "id": 372,
              "nodeType": "StructuredDocumentation",
              "src": "1405:162:6",
              "text": " @dev Function to mint tokens.\n @param to The address that will receive the minted tokens\n @param value The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 389,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 379,
                "modifierName": {
                  "id": 378,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 325,
                  "src": "1620:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1620:7:6"
              },
              {
                "id": 381,
                "modifierName": {
                  "id": 380,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1628:9:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1628:9:6"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 377,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 374,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 389,
                  "src": "1586:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 373,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1586:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 376,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 389,
                  "src": "1598:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 375,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1598:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1585:27:6"
            },
            "returnParameters": {
              "id": 382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1638:0:6"
            },
            "scope": 428,
            "src": "1572:99:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 404,
              "nodeType": "Block",
              "src": "1792:70:6",
              "statements": [
                {
                  "expression": {
                    "id": 399,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 397,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 311,
                      "src": "1802:16:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 398,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1821:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1802:23:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 400,
                  "nodeType": "ExpressionStatement",
                  "src": "1802:23:6"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 401,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 314,
                      "src": "1841:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 402,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1841:14:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 403,
                  "nodeType": "EmitStatement",
                  "src": "1836:19:6"
                }
              ]
            },
            "documentation": {
              "id": 390,
              "nodeType": "StructuredDocumentation",
              "src": "1677:60:6",
              "text": " @dev Function to stop minting new tokens."
            },
            "functionSelector": "7d64bcb4",
            "id": 405,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 393,
                "modifierName": {
                  "id": 392,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 325,
                  "src": "1774:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1774:7:6"
              },
              {
                "id": 395,
                "modifierName": {
                  "id": 394,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 770,
                  "src": "1782:9:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1782:9:6"
              }
            ],
            "name": "finishMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:2:6"
            },
            "returnParameters": {
              "id": 396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1792:0:6"
            },
            "scope": 428,
            "src": "1742:120:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1764,
              1901
            ],
            "body": {
              "id": 426,
              "nodeType": "Block",
              "src": "2048:61:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 421,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 408,
                        "src": "2085:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 422,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "2091:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 423,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "2095:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 418,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2058:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_CommonERC20_$428",
                          "typeString": "contract super CommonERC20"
                        }
                      },
                      "id": 420,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1901,
                      "src": "2058:26:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2058:44:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 425,
                  "nodeType": "ExpressionStatement",
                  "src": "2058:44:6"
                }
              ]
            },
            "documentation": {
              "id": 406,
              "nodeType": "StructuredDocumentation",
              "src": "1868:57:6",
              "text": " @dev See {ERC20-_beforeTokenTransfer}."
            },
            "id": 427,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 416,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 414,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1765,
                  "src": "2028:5:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$1765",
                    "typeString": "contract ERC20"
                  }
                },
                {
                  "id": 415,
                  "name": "ERC20Capped",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1902,
                  "src": "2035:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Capped_$1902",
                    "typeString": "contract ERC20Capped"
                  }
                }
              ],
              "src": "2019:28:6"
            },
            "parameters": {
              "id": 413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1960:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1960:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 410,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1974:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1974:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 412,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 427,
                  "src": "1986:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1986:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1959:42:6"
            },
            "returnParameters": {
              "id": 417,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2048:0:6"
            },
            "scope": 428,
            "src": "1930:179:6",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 429,
        "src": "429:1682:6"
      }
    ],
    "src": "33:2079:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.3+commit.9bfce1f6.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.1",
  "updatedAt": "2020-10-17T12:17:50.939Z",
  "devdoc": {
    "author": "ERC20 Generator (https://vittominacori.github.io/erc20-generator)",
    "details": "Implementation of the CommonERC20",
    "events": {
      "MintFinished()": {
        "details": "Emitted during finish minting"
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "finishMinting()": {
        "details": "Function to stop minting new tokens."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens",
          "value": "The amount of tokens to mint"
        }
      },
      "mintingFinished()": {
        "returns": {
          "_0": "if minting is finished or not."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "CommonERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}